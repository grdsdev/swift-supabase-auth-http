// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Issues access and refresh tokens based on grant type.
    ///
    /// - Remark: HTTP `POST /token`.
    /// - Remark: Generated from `#/paths//token/post`.
    func postToken(_ input: Operations.PostToken.Input) async throws -> Operations.PostToken.Output
    /// Logs out a user.
    ///
    /// - Remark: HTTP `POST /logout`.
    /// - Remark: Generated from `#/paths//logout/post`.
    func postLogout(_ input: Operations.PostLogout.Input) async throws -> Operations.PostLogout.Output
    /// Authenticate by verifying the possession of a one-time token. Usually for use as clickable links.
    ///
    /// - Remark: HTTP `GET /verify`.
    /// - Remark: Generated from `#/paths//verify/get`.
    func getVerify(_ input: Operations.GetVerify.Input) async throws -> Operations.GetVerify.Output
    /// Authenticate by verifying the possession of a one-time token.
    ///
    /// - Remark: HTTP `POST /verify`.
    /// - Remark: Generated from `#/paths//verify/post`.
    func postVerify(_ input: Operations.PostVerify.Input) async throws -> Operations.PostVerify.Output
    /// Redirects to an external OAuth provider. Usually for use as clickable links.
    ///
    /// - Remark: HTTP `GET /authorize`.
    /// - Remark: Generated from `#/paths//authorize/get`.
    func getAuthorize(_ input: Operations.GetAuthorize.Input) async throws -> Operations.GetAuthorize.Output
    /// Signs a user up.
    ///
    /// Creates a new user.
    ///
    ///
    /// - Remark: HTTP `POST /signup`.
    /// - Remark: Generated from `#/paths//signup/post`.
    func postSignup(_ input: Operations.PostSignup.Input) async throws -> Operations.PostSignup.Output
    /// Request password recovery.
    ///
    /// Users that have forgotten their password can have it reset with this API.
    ///
    ///
    /// - Remark: HTTP `POST /recover`.
    /// - Remark: Generated from `#/paths//recover/post`.
    func postRecover(_ input: Operations.PostRecover.Input) async throws -> Operations.PostRecover.Output
    /// Resends a one-time password (OTP) through email or SMS.
    ///
    /// Allows a user to resend an existing signup, sms, email_change or phone_change OTP.
    ///
    ///
    /// - Remark: HTTP `POST /resend`.
    /// - Remark: Generated from `#/paths//resend/post`.
    func postResend(_ input: Operations.PostResend.Input) async throws -> Operations.PostResend.Output
    /// Authenticate a user by sending them a magic link.
    ///
    /// A magic link is a special type of URL that includes a One-Time Password. When a user visits this link in a browser they are immediately authenticated.
    ///
    ///
    /// - Remark: HTTP `POST /magiclink`.
    /// - Remark: Generated from `#/paths//magiclink/post`.
    func postMagiclink(_ input: Operations.PostMagiclink.Input) async throws -> Operations.PostMagiclink.Output
    /// Authenticate a user by sending them a One-Time Password over email or SMS.
    ///
    /// - Remark: HTTP `POST /otp`.
    /// - Remark: Generated from `#/paths//otp/post`.
    func postOtp(_ input: Operations.PostOtp.Input) async throws -> Operations.PostOtp.Output
    /// Fetch the latest user account information.
    ///
    /// - Remark: HTTP `GET /user`.
    /// - Remark: Generated from `#/paths//user/get`.
    func getUser(_ input: Operations.GetUser.Input) async throws -> Operations.GetUser.Output
    /// Update certain properties of the current user account.
    ///
    /// - Remark: HTTP `PUT /user`.
    /// - Remark: Generated from `#/paths//user/put`.
    func putUser(_ input: Operations.PutUser.Input) async throws -> Operations.PutUser.Output
    /// Links an OAuth identity to an existing user. Redirects to an external OAuth provider.
    ///
    /// - Remark: HTTP `GET /user/identities/authorize`.
    /// - Remark: Generated from `#/paths//user/identities/authorize/get`.
    func getUserIdentitiesAuthorize(_ input: Operations.GetUserIdentitiesAuthorize.Input) async throws -> Operations.GetUserIdentitiesAuthorize.Output
    /// Unlinks an identity from the current user.
    ///
    /// - Remark: HTTP `DELETE /user/identities/{identityId}`.
    /// - Remark: Generated from `#/paths//user/identities/{identityId}/delete`.
    func deleteUserIdentitiesIdentityId(_ input: Operations.DeleteUserIdentitiesIdentityId.Input) async throws -> Operations.DeleteUserIdentitiesIdentityId.Output
    /// Reauthenticates the possession of an email or phone number for the purpose of password change.
    ///
    /// For a password to be changed on a user account, the user's email or phone number needs to be confirmed before they are allowed to set a new password. This requirement is configurable. This API sends a confirmation email or SMS message. A nonce in this message can be provided in `PUT /user` to change the password on the account.
    ///
    ///
    /// - Remark: HTTP `POST /reauthenticate`.
    /// - Remark: Generated from `#/paths//reauthenticate/post`.
    func postReauthenticate(_ input: Operations.PostReauthenticate.Input) async throws -> Operations.PostReauthenticate.Output
    /// Begin enrolling a new factor for MFA.
    ///
    /// - Remark: HTTP `POST /factors`.
    /// - Remark: Generated from `#/paths//factors/post`.
    func postFactors(_ input: Operations.PostFactors.Input) async throws -> Operations.PostFactors.Output
    /// Create a new challenge for a MFA factor.
    ///
    /// - Remark: HTTP `POST /factors/{factorId}/challenge`.
    /// - Remark: Generated from `#/paths//factors/{factorId}/challenge/post`.
    func postFactorsFactorIdChallenge(_ input: Operations.PostFactorsFactorIdChallenge.Input) async throws -> Operations.PostFactorsFactorIdChallenge.Output
    /// Verify a challenge on a factor.
    ///
    /// - Remark: HTTP `POST /factors/{factorId}/verify`.
    /// - Remark: Generated from `#/paths//factors/{factorId}/verify/post`.
    func postFactorsFactorIdVerify(_ input: Operations.PostFactorsFactorIdVerify.Input) async throws -> Operations.PostFactorsFactorIdVerify.Output
    /// Remove a MFA factor from a user.
    ///
    /// - Remark: HTTP `DELETE /factors/{factorId}`.
    /// - Remark: Generated from `#/paths//factors/{factorId}/delete`.
    func deleteFactorsFactorId(_ input: Operations.DeleteFactorsFactorId.Input) async throws -> Operations.DeleteFactorsFactorId.Output
    /// Redirects OAuth flow errors to the frontend app.
    ///
    /// When an OAuth sign-in flow fails for any reason, the error message needs to be delivered to the frontend app requesting the flow. This callback delivers the errors as `error` and `error_description` query params. Usually this request is not called directly.
    ///
    ///
    /// - Remark: HTTP `GET /callback`.
    /// - Remark: Generated from `#/paths//callback/get`.
    func getCallback(_ input: Operations.GetCallback.Input) async throws -> Operations.GetCallback.Output
    /// Redirects OAuth flow errors to the frontend app.
    ///
    /// When an OAuth sign-in flow fails for any reason, the error message needs to be delivered to the frontend app requesting the flow. This callback delivers the errors as `error` and `error_description` query params. Usually this request is not called directly.
    ///
    ///
    /// - Remark: HTTP `POST /callback`.
    /// - Remark: Generated from `#/paths//callback/post`.
    func postCallback(_ input: Operations.PostCallback.Input) async throws -> Operations.PostCallback.Output
    /// Initiate a Single-Sign On flow.
    ///
    /// - Remark: HTTP `POST /sso`.
    /// - Remark: Generated from `#/paths//sso/post`.
    func postSso(_ input: Operations.PostSso.Input) async throws -> Operations.PostSso.Output
    /// Returns the SAML 2.0 Metadata XML.
    ///
    /// The metadata XML can be downloaded or used for the SAML 2.0 Metadata URL discovery mechanism. This URL is the SAML 2.0 EntityID of the Service Provider implemented by this server.
    ///
    ///
    /// - Remark: HTTP `GET /saml/metadata`.
    /// - Remark: Generated from `#/paths//saml/metadata/get`.
    func getSamlMetadata(_ input: Operations.GetSamlMetadata.Input) async throws -> Operations.GetSamlMetadata.Output
    /// SAML 2.0 Assertion Consumer Service (ACS) endpoint.
    ///
    /// Implements the SAML 2.0 Assertion Consumer Service (ACS) endpoint supporting the POST and Artifact bindings.
    ///
    ///
    /// - Remark: HTTP `POST /saml/acs`.
    /// - Remark: Generated from `#/paths//saml/acs/post`.
    func postSamlAcs(_ input: Operations.PostSamlAcs.Input) async throws -> Operations.PostSamlAcs.Output
    /// Invite a user by email.
    ///
    /// Sends an invitation email which contains a link that allows the user to sign-in.
    ///
    ///
    /// - Remark: HTTP `POST /invite`.
    /// - Remark: Generated from `#/paths//invite/post`.
    func postInvite(_ input: Operations.PostInvite.Input) async throws -> Operations.PostInvite.Output
    /// Generate a link to send in an email message.
    ///
    /// - Remark: HTTP `POST /admin/generate_link`.
    /// - Remark: Generated from `#/paths//admin/generate_link/post`.
    func postAdminGenerateLink(_ input: Operations.PostAdminGenerateLink.Input) async throws -> Operations.PostAdminGenerateLink.Output
    /// Fetch audit log events.
    ///
    /// - Remark: HTTP `GET /admin/audit`.
    /// - Remark: Generated from `#/paths//admin/audit/get`.
    func getAdminAudit(_ input: Operations.GetAdminAudit.Input) async throws -> Operations.GetAdminAudit.Output
    /// Fetch a listing of users.
    ///
    /// - Remark: HTTP `GET /admin/users`.
    /// - Remark: Generated from `#/paths//admin/users/get`.
    func getAdminUsers(_ input: Operations.GetAdminUsers.Input) async throws -> Operations.GetAdminUsers.Output
    /// Fetch user account data for a user.
    ///
    /// - Remark: HTTP `GET /admin/users/{userId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/get`.
    func getAdminUsersUserId(_ input: Operations.GetAdminUsersUserId.Input) async throws -> Operations.GetAdminUsersUserId.Output
    /// Update user's account data.
    ///
    /// - Remark: HTTP `PUT /admin/users/{userId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/put`.
    func putAdminUsersUserId(_ input: Operations.PutAdminUsersUserId.Input) async throws -> Operations.PutAdminUsersUserId.Output
    /// Delete a user.
    ///
    /// - Remark: HTTP `DELETE /admin/users/{userId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/delete`.
    func deleteAdminUsersUserId(_ input: Operations.DeleteAdminUsersUserId.Input) async throws -> Operations.DeleteAdminUsersUserId.Output
    /// List all of the MFA factors for a user.
    ///
    /// - Remark: HTTP `GET /admin/users/{userId}/factors`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/get`.
    func getAdminUsersUserIdFactors(_ input: Operations.GetAdminUsersUserIdFactors.Input) async throws -> Operations.GetAdminUsersUserIdFactors.Output
    /// Update a user's MFA factor.
    ///
    /// - Remark: HTTP `PUT /admin/users/{userId}/factors/{factorId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/put`.
    func putAdminUsersUserIdFactorsFactorId(_ input: Operations.PutAdminUsersUserIdFactorsFactorId.Input) async throws -> Operations.PutAdminUsersUserIdFactorsFactorId.Output
    /// Remove a user's MFA factor.
    ///
    /// - Remark: HTTP `DELETE /admin/users/{userId}/factors/{factorId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/delete`.
    func deleteAdminUsersUserIdFactorsFactorId(_ input: Operations.DeleteAdminUsersUserIdFactorsFactorId.Input) async throws -> Operations.DeleteAdminUsersUserIdFactorsFactorId.Output
    /// Fetch a list of all registered SSO providers.
    ///
    /// - Remark: HTTP `GET /admin/sso/providers`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/get`.
    func getAdminSsoProviders(_ input: Operations.GetAdminSsoProviders.Input) async throws -> Operations.GetAdminSsoProviders.Output
    /// Register a new SSO provider.
    ///
    /// - Remark: HTTP `POST /admin/sso/providers`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/post`.
    func postAdminSsoProviders(_ input: Operations.PostAdminSsoProviders.Input) async throws -> Operations.PostAdminSsoProviders.Output
    /// Fetch SSO provider details.
    ///
    /// - Remark: HTTP `GET /admin/sso/providers/{ssoProviderId}`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/get`.
    func getAdminSsoProvidersSsoProviderId(_ input: Operations.GetAdminSsoProvidersSsoProviderId.Input) async throws -> Operations.GetAdminSsoProvidersSsoProviderId.Output
    /// Update details about a SSO provider.
    ///
    /// You can only update only one of `metadata_url` or `metadata_xml` at once. The SAML Metadata represented by these updates must advertize the same Identity Provider EntityID. Do not include the `domains` or `attribute_mapping` property to keep the existing database values.
    ///
    ///
    /// - Remark: HTTP `PUT /admin/sso/providers/{ssoProviderId}`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/put`.
    func putAdminSsoProvidersSsoProviderId(_ input: Operations.PutAdminSsoProvidersSsoProviderId.Input) async throws -> Operations.PutAdminSsoProvidersSsoProviderId.Output
    /// Remove an SSO provider.
    ///
    /// - Remark: HTTP `DELETE /admin/sso/providers/{ssoProviderId}`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/delete`.
    func deleteAdminSsoProvidersSsoProviderId(_ input: Operations.DeleteAdminSsoProvidersSsoProviderId.Input) async throws -> Operations.DeleteAdminSsoProvidersSsoProviderId.Output
    /// List OAuth clients (admin)
    ///
    /// Retrieves a list of all registered OAuth clients. Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `GET /admin/oauth/clients`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/get`.
    func getAdminOauthClients(_ input: Operations.GetAdminOauthClients.Input) async throws -> Operations.GetAdminOauthClients.Output
    /// Register OAuth client (admin)
    ///
    /// Manually register a new OAuth client (admin endpoint). Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `POST /admin/oauth/clients`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/post`.
    func postAdminOauthClients(_ input: Operations.PostAdminOauthClients.Input) async throws -> Operations.PostAdminOauthClients.Output
    /// Get OAuth client details (admin)
    ///
    /// Retrieves details of a specific OAuth client. Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `GET /admin/oauth/clients/{client_id}`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/get`.
    func getAdminOauthClientsClientId(_ input: Operations.GetAdminOauthClientsClientId.Input) async throws -> Operations.GetAdminOauthClientsClientId.Output
    /// Delete OAuth client (admin)
    ///
    /// Removes an OAuth client registration. Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `DELETE /admin/oauth/clients/{client_id}`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/delete`.
    func deleteAdminOauthClientsClientId(_ input: Operations.DeleteAdminOauthClientsClientId.Input) async throws -> Operations.DeleteAdminOauthClientsClientId.Output
    /// Regenerate OAuth client secret (admin)
    ///
    /// Regenerates the client secret for a confidential OAuth client. Only available when OAuth server is enabled. This endpoint can only be used for confidential clients, not public clients.
    ///
    ///
    /// - Remark: HTTP `POST /admin/oauth/clients/{client_id}/regenerate_secret`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/regenerate_secret/post`.
    func postAdminOauthClientsClientIdRegenerateSecret(_ input: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Input) async throws -> Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output
    /// Register a new OAuth client dynamically (public endpoint).
    ///
    /// Allows applications to register as OAuth clients with this server dynamically. This follows the OAuth 2.0 Dynamic Client Registration Protocol. Only available when OAuth server is enabled and dynamic registration is allowed (set `GOTRUE_OAUTH_SERVER_ENABLED=true` and `GOTRUE_OAUTH_SERVER_ALLOW_DYNAMIC_REGISTRATION=true` for self-hosted or enable both settings in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `POST /oauth/clients/register`.
    /// - Remark: Generated from `#/paths//oauth/clients/register/post`.
    func postOauthClientsRegister(_ input: Operations.PostOauthClientsRegister.Input) async throws -> Operations.PostOauthClientsRegister.Output
    /// OAuth 2.1 Token endpoint
    ///
    /// Issues access tokens in exchange for authorization codes or refresh tokens. Supports authorization_code and refresh_token grant types. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `POST /oauth/token`.
    /// - Remark: Generated from `#/paths//oauth/token/post`.
    func postOauthToken(_ input: Operations.PostOauthToken.Input) async throws -> Operations.PostOauthToken.Output
    /// OAuth 2.1 Authorization endpoint
    ///
    /// Initiates the OAuth authorization code flow. Redirects users to login and authorize the requesting application. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `GET /oauth/authorize`.
    /// - Remark: Generated from `#/paths//oauth/authorize/get`.
    func getOauthAuthorize(_ input: Operations.GetOauthAuthorize.Input) async throws -> Operations.GetOauthAuthorize.Output
    /// Get OAuth authorization details
    ///
    /// Retrieves details about a pending OAuth authorization request. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `GET /oauth/authorizations/{authorization_id}`.
    /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/get`.
    func getOauthAuthorizationsAuthorizationId(_ input: Operations.GetOauthAuthorizationsAuthorizationId.Input) async throws -> Operations.GetOauthAuthorizationsAuthorizationId.Output
    /// Approve or deny OAuth authorization
    ///
    /// User approves or denies authorization to the OAuth client. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `POST /oauth/authorizations/{authorization_id}/consent`.
    /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/consent/post`.
    func postOauthAuthorizationsAuthorizationIdConsent(_ input: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input) async throws -> Operations.PostOauthAuthorizationsAuthorizationIdConsent.Output
    /// Service healthcheck.
    ///
    /// Ping this endpoint to receive information about the health of the service.
    ///
    /// - Remark: HTTP `GET /health`.
    /// - Remark: Generated from `#/paths//health/get`.
    func getHealth(_ input: Operations.GetHealth.Input) async throws -> Operations.GetHealth.Output
    /// Retrieve some of the public settings of the server.
    ///
    /// Use this endpoint to configure parts of any authentication UIs depending on the configured settings.
    ///
    ///
    /// - Remark: HTTP `GET /settings`.
    /// - Remark: Generated from `#/paths//settings/get`.
    func getSettings(_ input: Operations.GetSettings.Input) async throws -> Operations.GetSettings.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Issues access and refresh tokens based on grant type.
    ///
    /// - Remark: HTTP `POST /token`.
    /// - Remark: Generated from `#/paths//token/post`.
    public func postToken(
        query: Operations.PostToken.Input.Query,
        headers: Operations.PostToken.Input.Headers = .init(),
        body: Operations.PostToken.Input.Body? = nil
    ) async throws -> Operations.PostToken.Output {
        try await postToken(Operations.PostToken.Input(
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// Logs out a user.
    ///
    /// - Remark: HTTP `POST /logout`.
    /// - Remark: Generated from `#/paths//logout/post`.
    public func postLogout(
        query: Operations.PostLogout.Input.Query = .init(),
        headers: Operations.PostLogout.Input.Headers = .init()
    ) async throws -> Operations.PostLogout.Output {
        try await postLogout(Operations.PostLogout.Input(
            query: query,
            headers: headers
        ))
    }
    /// Authenticate by verifying the possession of a one-time token. Usually for use as clickable links.
    ///
    /// - Remark: HTTP `GET /verify`.
    /// - Remark: Generated from `#/paths//verify/get`.
    public func getVerify(query: Operations.GetVerify.Input.Query) async throws -> Operations.GetVerify.Output {
        try await getVerify(Operations.GetVerify.Input(query: query))
    }
    /// Authenticate by verifying the possession of a one-time token.
    ///
    /// - Remark: HTTP `POST /verify`.
    /// - Remark: Generated from `#/paths//verify/post`.
    public func postVerify(
        headers: Operations.PostVerify.Input.Headers = .init(),
        body: Operations.PostVerify.Input.Body? = nil
    ) async throws -> Operations.PostVerify.Output {
        try await postVerify(Operations.PostVerify.Input(
            headers: headers,
            body: body
        ))
    }
    /// Redirects to an external OAuth provider. Usually for use as clickable links.
    ///
    /// - Remark: HTTP `GET /authorize`.
    /// - Remark: Generated from `#/paths//authorize/get`.
    public func getAuthorize(query: Operations.GetAuthorize.Input.Query) async throws -> Operations.GetAuthorize.Output {
        try await getAuthorize(Operations.GetAuthorize.Input(query: query))
    }
    /// Signs a user up.
    ///
    /// Creates a new user.
    ///
    ///
    /// - Remark: HTTP `POST /signup`.
    /// - Remark: Generated from `#/paths//signup/post`.
    public func postSignup(
        headers: Operations.PostSignup.Input.Headers = .init(),
        body: Operations.PostSignup.Input.Body? = nil
    ) async throws -> Operations.PostSignup.Output {
        try await postSignup(Operations.PostSignup.Input(
            headers: headers,
            body: body
        ))
    }
    /// Request password recovery.
    ///
    /// Users that have forgotten their password can have it reset with this API.
    ///
    ///
    /// - Remark: HTTP `POST /recover`.
    /// - Remark: Generated from `#/paths//recover/post`.
    public func postRecover(
        headers: Operations.PostRecover.Input.Headers = .init(),
        body: Operations.PostRecover.Input.Body? = nil
    ) async throws -> Operations.PostRecover.Output {
        try await postRecover(Operations.PostRecover.Input(
            headers: headers,
            body: body
        ))
    }
    /// Resends a one-time password (OTP) through email or SMS.
    ///
    /// Allows a user to resend an existing signup, sms, email_change or phone_change OTP.
    ///
    ///
    /// - Remark: HTTP `POST /resend`.
    /// - Remark: Generated from `#/paths//resend/post`.
    public func postResend(
        headers: Operations.PostResend.Input.Headers = .init(),
        body: Operations.PostResend.Input.Body? = nil
    ) async throws -> Operations.PostResend.Output {
        try await postResend(Operations.PostResend.Input(
            headers: headers,
            body: body
        ))
    }
    /// Authenticate a user by sending them a magic link.
    ///
    /// A magic link is a special type of URL that includes a One-Time Password. When a user visits this link in a browser they are immediately authenticated.
    ///
    ///
    /// - Remark: HTTP `POST /magiclink`.
    /// - Remark: Generated from `#/paths//magiclink/post`.
    public func postMagiclink(
        headers: Operations.PostMagiclink.Input.Headers = .init(),
        body: Operations.PostMagiclink.Input.Body? = nil
    ) async throws -> Operations.PostMagiclink.Output {
        try await postMagiclink(Operations.PostMagiclink.Input(
            headers: headers,
            body: body
        ))
    }
    /// Authenticate a user by sending them a One-Time Password over email or SMS.
    ///
    /// - Remark: HTTP `POST /otp`.
    /// - Remark: Generated from `#/paths//otp/post`.
    public func postOtp(
        headers: Operations.PostOtp.Input.Headers = .init(),
        body: Operations.PostOtp.Input.Body? = nil
    ) async throws -> Operations.PostOtp.Output {
        try await postOtp(Operations.PostOtp.Input(
            headers: headers,
            body: body
        ))
    }
    /// Fetch the latest user account information.
    ///
    /// - Remark: HTTP `GET /user`.
    /// - Remark: Generated from `#/paths//user/get`.
    public func getUser(headers: Operations.GetUser.Input.Headers = .init()) async throws -> Operations.GetUser.Output {
        try await getUser(Operations.GetUser.Input(headers: headers))
    }
    /// Update certain properties of the current user account.
    ///
    /// - Remark: HTTP `PUT /user`.
    /// - Remark: Generated from `#/paths//user/put`.
    public func putUser(
        headers: Operations.PutUser.Input.Headers = .init(),
        body: Operations.PutUser.Input.Body? = nil
    ) async throws -> Operations.PutUser.Output {
        try await putUser(Operations.PutUser.Input(
            headers: headers,
            body: body
        ))
    }
    /// Links an OAuth identity to an existing user. Redirects to an external OAuth provider.
    ///
    /// - Remark: HTTP `GET /user/identities/authorize`.
    /// - Remark: Generated from `#/paths//user/identities/authorize/get`.
    public func getUserIdentitiesAuthorize(query: Operations.GetUserIdentitiesAuthorize.Input.Query) async throws -> Operations.GetUserIdentitiesAuthorize.Output {
        try await getUserIdentitiesAuthorize(Operations.GetUserIdentitiesAuthorize.Input(query: query))
    }
    /// Unlinks an identity from the current user.
    ///
    /// - Remark: HTTP `DELETE /user/identities/{identityId}`.
    /// - Remark: Generated from `#/paths//user/identities/{identityId}/delete`.
    public func deleteUserIdentitiesIdentityId(
        path: Operations.DeleteUserIdentitiesIdentityId.Input.Path,
        headers: Operations.DeleteUserIdentitiesIdentityId.Input.Headers = .init()
    ) async throws -> Operations.DeleteUserIdentitiesIdentityId.Output {
        try await deleteUserIdentitiesIdentityId(Operations.DeleteUserIdentitiesIdentityId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Reauthenticates the possession of an email or phone number for the purpose of password change.
    ///
    /// For a password to be changed on a user account, the user's email or phone number needs to be confirmed before they are allowed to set a new password. This requirement is configurable. This API sends a confirmation email or SMS message. A nonce in this message can be provided in `PUT /user` to change the password on the account.
    ///
    ///
    /// - Remark: HTTP `POST /reauthenticate`.
    /// - Remark: Generated from `#/paths//reauthenticate/post`.
    public func postReauthenticate(headers: Operations.PostReauthenticate.Input.Headers = .init()) async throws -> Operations.PostReauthenticate.Output {
        try await postReauthenticate(Operations.PostReauthenticate.Input(headers: headers))
    }
    /// Begin enrolling a new factor for MFA.
    ///
    /// - Remark: HTTP `POST /factors`.
    /// - Remark: Generated from `#/paths//factors/post`.
    public func postFactors(
        headers: Operations.PostFactors.Input.Headers = .init(),
        body: Operations.PostFactors.Input.Body? = nil
    ) async throws -> Operations.PostFactors.Output {
        try await postFactors(Operations.PostFactors.Input(
            headers: headers,
            body: body
        ))
    }
    /// Create a new challenge for a MFA factor.
    ///
    /// - Remark: HTTP `POST /factors/{factorId}/challenge`.
    /// - Remark: Generated from `#/paths//factors/{factorId}/challenge/post`.
    public func postFactorsFactorIdChallenge(
        path: Operations.PostFactorsFactorIdChallenge.Input.Path,
        headers: Operations.PostFactorsFactorIdChallenge.Input.Headers = .init(),
        body: Operations.PostFactorsFactorIdChallenge.Input.Body? = nil
    ) async throws -> Operations.PostFactorsFactorIdChallenge.Output {
        try await postFactorsFactorIdChallenge(Operations.PostFactorsFactorIdChallenge.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Verify a challenge on a factor.
    ///
    /// - Remark: HTTP `POST /factors/{factorId}/verify`.
    /// - Remark: Generated from `#/paths//factors/{factorId}/verify/post`.
    public func postFactorsFactorIdVerify(
        path: Operations.PostFactorsFactorIdVerify.Input.Path,
        headers: Operations.PostFactorsFactorIdVerify.Input.Headers = .init(),
        body: Operations.PostFactorsFactorIdVerify.Input.Body? = nil
    ) async throws -> Operations.PostFactorsFactorIdVerify.Output {
        try await postFactorsFactorIdVerify(Operations.PostFactorsFactorIdVerify.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove a MFA factor from a user.
    ///
    /// - Remark: HTTP `DELETE /factors/{factorId}`.
    /// - Remark: Generated from `#/paths//factors/{factorId}/delete`.
    public func deleteFactorsFactorId(
        path: Operations.DeleteFactorsFactorId.Input.Path,
        headers: Operations.DeleteFactorsFactorId.Input.Headers = .init()
    ) async throws -> Operations.DeleteFactorsFactorId.Output {
        try await deleteFactorsFactorId(Operations.DeleteFactorsFactorId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Redirects OAuth flow errors to the frontend app.
    ///
    /// When an OAuth sign-in flow fails for any reason, the error message needs to be delivered to the frontend app requesting the flow. This callback delivers the errors as `error` and `error_description` query params. Usually this request is not called directly.
    ///
    ///
    /// - Remark: HTTP `GET /callback`.
    /// - Remark: Generated from `#/paths//callback/get`.
    public func getCallback() async throws -> Operations.GetCallback.Output {
        try await getCallback(Operations.GetCallback.Input())
    }
    /// Redirects OAuth flow errors to the frontend app.
    ///
    /// When an OAuth sign-in flow fails for any reason, the error message needs to be delivered to the frontend app requesting the flow. This callback delivers the errors as `error` and `error_description` query params. Usually this request is not called directly.
    ///
    ///
    /// - Remark: HTTP `POST /callback`.
    /// - Remark: Generated from `#/paths//callback/post`.
    public func postCallback() async throws -> Operations.PostCallback.Output {
        try await postCallback(Operations.PostCallback.Input())
    }
    /// Initiate a Single-Sign On flow.
    ///
    /// - Remark: HTTP `POST /sso`.
    /// - Remark: Generated from `#/paths//sso/post`.
    public func postSso(
        headers: Operations.PostSso.Input.Headers = .init(),
        body: Operations.PostSso.Input.Body? = nil
    ) async throws -> Operations.PostSso.Output {
        try await postSso(Operations.PostSso.Input(
            headers: headers,
            body: body
        ))
    }
    /// Returns the SAML 2.0 Metadata XML.
    ///
    /// The metadata XML can be downloaded or used for the SAML 2.0 Metadata URL discovery mechanism. This URL is the SAML 2.0 EntityID of the Service Provider implemented by this server.
    ///
    ///
    /// - Remark: HTTP `GET /saml/metadata`.
    /// - Remark: Generated from `#/paths//saml/metadata/get`.
    public func getSamlMetadata(query: Operations.GetSamlMetadata.Input.Query = .init()) async throws -> Operations.GetSamlMetadata.Output {
        try await getSamlMetadata(Operations.GetSamlMetadata.Input(query: query))
    }
    /// SAML 2.0 Assertion Consumer Service (ACS) endpoint.
    ///
    /// Implements the SAML 2.0 Assertion Consumer Service (ACS) endpoint supporting the POST and Artifact bindings.
    ///
    ///
    /// - Remark: HTTP `POST /saml/acs`.
    /// - Remark: Generated from `#/paths//saml/acs/post`.
    public func postSamlAcs(
        query: Operations.PostSamlAcs.Input.Query = .init(),
        headers: Operations.PostSamlAcs.Input.Headers = .init()
    ) async throws -> Operations.PostSamlAcs.Output {
        try await postSamlAcs(Operations.PostSamlAcs.Input(
            query: query,
            headers: headers
        ))
    }
    /// Invite a user by email.
    ///
    /// Sends an invitation email which contains a link that allows the user to sign-in.
    ///
    ///
    /// - Remark: HTTP `POST /invite`.
    /// - Remark: Generated from `#/paths//invite/post`.
    public func postInvite(
        headers: Operations.PostInvite.Input.Headers = .init(),
        body: Operations.PostInvite.Input.Body? = nil
    ) async throws -> Operations.PostInvite.Output {
        try await postInvite(Operations.PostInvite.Input(
            headers: headers,
            body: body
        ))
    }
    /// Generate a link to send in an email message.
    ///
    /// - Remark: HTTP `POST /admin/generate_link`.
    /// - Remark: Generated from `#/paths//admin/generate_link/post`.
    public func postAdminGenerateLink(
        headers: Operations.PostAdminGenerateLink.Input.Headers = .init(),
        body: Operations.PostAdminGenerateLink.Input.Body? = nil
    ) async throws -> Operations.PostAdminGenerateLink.Output {
        try await postAdminGenerateLink(Operations.PostAdminGenerateLink.Input(
            headers: headers,
            body: body
        ))
    }
    /// Fetch audit log events.
    ///
    /// - Remark: HTTP `GET /admin/audit`.
    /// - Remark: Generated from `#/paths//admin/audit/get`.
    public func getAdminAudit(
        query: Operations.GetAdminAudit.Input.Query = .init(),
        headers: Operations.GetAdminAudit.Input.Headers = .init()
    ) async throws -> Operations.GetAdminAudit.Output {
        try await getAdminAudit(Operations.GetAdminAudit.Input(
            query: query,
            headers: headers
        ))
    }
    /// Fetch a listing of users.
    ///
    /// - Remark: HTTP `GET /admin/users`.
    /// - Remark: Generated from `#/paths//admin/users/get`.
    public func getAdminUsers(
        query: Operations.GetAdminUsers.Input.Query = .init(),
        headers: Operations.GetAdminUsers.Input.Headers = .init()
    ) async throws -> Operations.GetAdminUsers.Output {
        try await getAdminUsers(Operations.GetAdminUsers.Input(
            query: query,
            headers: headers
        ))
    }
    /// Fetch user account data for a user.
    ///
    /// - Remark: HTTP `GET /admin/users/{userId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/get`.
    public func getAdminUsersUserId(
        path: Operations.GetAdminUsersUserId.Input.Path,
        headers: Operations.GetAdminUsersUserId.Input.Headers = .init()
    ) async throws -> Operations.GetAdminUsersUserId.Output {
        try await getAdminUsersUserId(Operations.GetAdminUsersUserId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update user's account data.
    ///
    /// - Remark: HTTP `PUT /admin/users/{userId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/put`.
    public func putAdminUsersUserId(
        path: Operations.PutAdminUsersUserId.Input.Path,
        headers: Operations.PutAdminUsersUserId.Input.Headers = .init(),
        body: Operations.PutAdminUsersUserId.Input.Body? = nil
    ) async throws -> Operations.PutAdminUsersUserId.Output {
        try await putAdminUsersUserId(Operations.PutAdminUsersUserId.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a user.
    ///
    /// - Remark: HTTP `DELETE /admin/users/{userId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/delete`.
    public func deleteAdminUsersUserId(
        path: Operations.DeleteAdminUsersUserId.Input.Path,
        headers: Operations.DeleteAdminUsersUserId.Input.Headers = .init()
    ) async throws -> Operations.DeleteAdminUsersUserId.Output {
        try await deleteAdminUsersUserId(Operations.DeleteAdminUsersUserId.Input(
            path: path,
            headers: headers
        ))
    }
    /// List all of the MFA factors for a user.
    ///
    /// - Remark: HTTP `GET /admin/users/{userId}/factors`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/get`.
    public func getAdminUsersUserIdFactors(
        path: Operations.GetAdminUsersUserIdFactors.Input.Path,
        headers: Operations.GetAdminUsersUserIdFactors.Input.Headers = .init()
    ) async throws -> Operations.GetAdminUsersUserIdFactors.Output {
        try await getAdminUsersUserIdFactors(Operations.GetAdminUsersUserIdFactors.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a user's MFA factor.
    ///
    /// - Remark: HTTP `PUT /admin/users/{userId}/factors/{factorId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/put`.
    public func putAdminUsersUserIdFactorsFactorId(
        path: Operations.PutAdminUsersUserIdFactorsFactorId.Input.Path,
        headers: Operations.PutAdminUsersUserIdFactorsFactorId.Input.Headers = .init(),
        body: Operations.PutAdminUsersUserIdFactorsFactorId.Input.Body? = nil
    ) async throws -> Operations.PutAdminUsersUserIdFactorsFactorId.Output {
        try await putAdminUsersUserIdFactorsFactorId(Operations.PutAdminUsersUserIdFactorsFactorId.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove a user's MFA factor.
    ///
    /// - Remark: HTTP `DELETE /admin/users/{userId}/factors/{factorId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/delete`.
    public func deleteAdminUsersUserIdFactorsFactorId(
        path: Operations.DeleteAdminUsersUserIdFactorsFactorId.Input.Path,
        headers: Operations.DeleteAdminUsersUserIdFactorsFactorId.Input.Headers = .init()
    ) async throws -> Operations.DeleteAdminUsersUserIdFactorsFactorId.Output {
        try await deleteAdminUsersUserIdFactorsFactorId(Operations.DeleteAdminUsersUserIdFactorsFactorId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Fetch a list of all registered SSO providers.
    ///
    /// - Remark: HTTP `GET /admin/sso/providers`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/get`.
    public func getAdminSsoProviders(headers: Operations.GetAdminSsoProviders.Input.Headers = .init()) async throws -> Operations.GetAdminSsoProviders.Output {
        try await getAdminSsoProviders(Operations.GetAdminSsoProviders.Input(headers: headers))
    }
    /// Register a new SSO provider.
    ///
    /// - Remark: HTTP `POST /admin/sso/providers`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/post`.
    public func postAdminSsoProviders(
        headers: Operations.PostAdminSsoProviders.Input.Headers = .init(),
        body: Operations.PostAdminSsoProviders.Input.Body? = nil
    ) async throws -> Operations.PostAdminSsoProviders.Output {
        try await postAdminSsoProviders(Operations.PostAdminSsoProviders.Input(
            headers: headers,
            body: body
        ))
    }
    /// Fetch SSO provider details.
    ///
    /// - Remark: HTTP `GET /admin/sso/providers/{ssoProviderId}`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/get`.
    public func getAdminSsoProvidersSsoProviderId(
        path: Operations.GetAdminSsoProvidersSsoProviderId.Input.Path,
        headers: Operations.GetAdminSsoProvidersSsoProviderId.Input.Headers = .init()
    ) async throws -> Operations.GetAdminSsoProvidersSsoProviderId.Output {
        try await getAdminSsoProvidersSsoProviderId(Operations.GetAdminSsoProvidersSsoProviderId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update details about a SSO provider.
    ///
    /// You can only update only one of `metadata_url` or `metadata_xml` at once. The SAML Metadata represented by these updates must advertize the same Identity Provider EntityID. Do not include the `domains` or `attribute_mapping` property to keep the existing database values.
    ///
    ///
    /// - Remark: HTTP `PUT /admin/sso/providers/{ssoProviderId}`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/put`.
    public func putAdminSsoProvidersSsoProviderId(
        path: Operations.PutAdminSsoProvidersSsoProviderId.Input.Path,
        headers: Operations.PutAdminSsoProvidersSsoProviderId.Input.Headers = .init(),
        body: Operations.PutAdminSsoProvidersSsoProviderId.Input.Body? = nil
    ) async throws -> Operations.PutAdminSsoProvidersSsoProviderId.Output {
        try await putAdminSsoProvidersSsoProviderId(Operations.PutAdminSsoProvidersSsoProviderId.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Remove an SSO provider.
    ///
    /// - Remark: HTTP `DELETE /admin/sso/providers/{ssoProviderId}`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/delete`.
    public func deleteAdminSsoProvidersSsoProviderId(
        path: Operations.DeleteAdminSsoProvidersSsoProviderId.Input.Path,
        headers: Operations.DeleteAdminSsoProvidersSsoProviderId.Input.Headers = .init()
    ) async throws -> Operations.DeleteAdminSsoProvidersSsoProviderId.Output {
        try await deleteAdminSsoProvidersSsoProviderId(Operations.DeleteAdminSsoProvidersSsoProviderId.Input(
            path: path,
            headers: headers
        ))
    }
    /// List OAuth clients (admin)
    ///
    /// Retrieves a list of all registered OAuth clients. Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `GET /admin/oauth/clients`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/get`.
    public func getAdminOauthClients(
        query: Operations.GetAdminOauthClients.Input.Query = .init(),
        headers: Operations.GetAdminOauthClients.Input.Headers = .init()
    ) async throws -> Operations.GetAdminOauthClients.Output {
        try await getAdminOauthClients(Operations.GetAdminOauthClients.Input(
            query: query,
            headers: headers
        ))
    }
    /// Register OAuth client (admin)
    ///
    /// Manually register a new OAuth client (admin endpoint). Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `POST /admin/oauth/clients`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/post`.
    public func postAdminOauthClients(
        headers: Operations.PostAdminOauthClients.Input.Headers = .init(),
        body: Operations.PostAdminOauthClients.Input.Body? = nil
    ) async throws -> Operations.PostAdminOauthClients.Output {
        try await postAdminOauthClients(Operations.PostAdminOauthClients.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get OAuth client details (admin)
    ///
    /// Retrieves details of a specific OAuth client. Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `GET /admin/oauth/clients/{client_id}`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/get`.
    public func getAdminOauthClientsClientId(
        path: Operations.GetAdminOauthClientsClientId.Input.Path,
        headers: Operations.GetAdminOauthClientsClientId.Input.Headers = .init()
    ) async throws -> Operations.GetAdminOauthClientsClientId.Output {
        try await getAdminOauthClientsClientId(Operations.GetAdminOauthClientsClientId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete OAuth client (admin)
    ///
    /// Removes an OAuth client registration. Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `DELETE /admin/oauth/clients/{client_id}`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/delete`.
    public func deleteAdminOauthClientsClientId(
        path: Operations.DeleteAdminOauthClientsClientId.Input.Path,
        headers: Operations.DeleteAdminOauthClientsClientId.Input.Headers = .init()
    ) async throws -> Operations.DeleteAdminOauthClientsClientId.Output {
        try await deleteAdminOauthClientsClientId(Operations.DeleteAdminOauthClientsClientId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Regenerate OAuth client secret (admin)
    ///
    /// Regenerates the client secret for a confidential OAuth client. Only available when OAuth server is enabled. This endpoint can only be used for confidential clients, not public clients.
    ///
    ///
    /// - Remark: HTTP `POST /admin/oauth/clients/{client_id}/regenerate_secret`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/regenerate_secret/post`.
    public func postAdminOauthClientsClientIdRegenerateSecret(
        path: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Input.Path,
        headers: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Input.Headers = .init()
    ) async throws -> Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output {
        try await postAdminOauthClientsClientIdRegenerateSecret(Operations.PostAdminOauthClientsClientIdRegenerateSecret.Input(
            path: path,
            headers: headers
        ))
    }
    /// Register a new OAuth client dynamically (public endpoint).
    ///
    /// Allows applications to register as OAuth clients with this server dynamically. This follows the OAuth 2.0 Dynamic Client Registration Protocol. Only available when OAuth server is enabled and dynamic registration is allowed (set `GOTRUE_OAUTH_SERVER_ENABLED=true` and `GOTRUE_OAUTH_SERVER_ALLOW_DYNAMIC_REGISTRATION=true` for self-hosted or enable both settings in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `POST /oauth/clients/register`.
    /// - Remark: Generated from `#/paths//oauth/clients/register/post`.
    public func postOauthClientsRegister(
        headers: Operations.PostOauthClientsRegister.Input.Headers = .init(),
        body: Operations.PostOauthClientsRegister.Input.Body? = nil
    ) async throws -> Operations.PostOauthClientsRegister.Output {
        try await postOauthClientsRegister(Operations.PostOauthClientsRegister.Input(
            headers: headers,
            body: body
        ))
    }
    /// OAuth 2.1 Token endpoint
    ///
    /// Issues access tokens in exchange for authorization codes or refresh tokens. Supports authorization_code and refresh_token grant types. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `POST /oauth/token`.
    /// - Remark: Generated from `#/paths//oauth/token/post`.
    public func postOauthToken(
        headers: Operations.PostOauthToken.Input.Headers = .init(),
        body: Operations.PostOauthToken.Input.Body? = nil
    ) async throws -> Operations.PostOauthToken.Output {
        try await postOauthToken(Operations.PostOauthToken.Input(
            headers: headers,
            body: body
        ))
    }
    /// OAuth 2.1 Authorization endpoint
    ///
    /// Initiates the OAuth authorization code flow. Redirects users to login and authorize the requesting application. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `GET /oauth/authorize`.
    /// - Remark: Generated from `#/paths//oauth/authorize/get`.
    public func getOauthAuthorize(
        query: Operations.GetOauthAuthorize.Input.Query,
        headers: Operations.GetOauthAuthorize.Input.Headers = .init()
    ) async throws -> Operations.GetOauthAuthorize.Output {
        try await getOauthAuthorize(Operations.GetOauthAuthorize.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get OAuth authorization details
    ///
    /// Retrieves details about a pending OAuth authorization request. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `GET /oauth/authorizations/{authorization_id}`.
    /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/get`.
    public func getOauthAuthorizationsAuthorizationId(
        path: Operations.GetOauthAuthorizationsAuthorizationId.Input.Path,
        headers: Operations.GetOauthAuthorizationsAuthorizationId.Input.Headers = .init()
    ) async throws -> Operations.GetOauthAuthorizationsAuthorizationId.Output {
        try await getOauthAuthorizationsAuthorizationId(Operations.GetOauthAuthorizationsAuthorizationId.Input(
            path: path,
            headers: headers
        ))
    }
    /// Approve or deny OAuth authorization
    ///
    /// User approves or denies authorization to the OAuth client. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `POST /oauth/authorizations/{authorization_id}/consent`.
    /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/consent/post`.
    public func postOauthAuthorizationsAuthorizationIdConsent(
        path: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Path,
        headers: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Headers = .init(),
        body: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Body? = nil
    ) async throws -> Operations.PostOauthAuthorizationsAuthorizationIdConsent.Output {
        try await postOauthAuthorizationsAuthorizationIdConsent(Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Service healthcheck.
    ///
    /// Ping this endpoint to receive information about the health of the service.
    ///
    /// - Remark: HTTP `GET /health`.
    /// - Remark: Generated from `#/paths//health/get`.
    public func getHealth(headers: Operations.GetHealth.Input.Headers = .init()) async throws -> Operations.GetHealth.Output {
        try await getHealth(Operations.GetHealth.Input(headers: headers))
    }
    /// Retrieve some of the public settings of the server.
    ///
    /// Use this endpoint to configure parts of any authentication UIs depending on the configured settings.
    ///
    ///
    /// - Remark: HTTP `GET /settings`.
    /// - Remark: Generated from `#/paths//settings/get`.
    public func getSettings(headers: Operations.GetSettings.Input.Headers = .init()) async throws -> Operations.GetSettings.Output {
        try await getSettings(Operations.GetSettings.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        ///
        /// - Parameters:
        ///   - project: Your Supabase project ID.
        public static func url(project: Swift.String = "abcdefghijklmnopqrst") throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://{project}.supabase.co/auth/v1",
                variables: [
                    .init(
                        name: "project",
                        value: project
                    )
                ]
            )
        }
    }
    ///
    /// - Parameters:
    ///   - project: Your Supabase project ID.
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1(project: Swift.String = "abcdefghijklmnopqrst") throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://{project}.supabase.co/auth/v1",
            variables: [
                .init(
                    name: "project",
                    value: project
                )
            ]
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// Use this property to pass a CAPTCHA token only if you have enabled CAPTCHA protection.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/GoTrueSecurity`.
        public struct GoTrueSecurity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GoTrueSecurity/captcha_token`.
            public var captchaToken: Swift.String?
            /// Creates a new `GoTrueSecurity`.
            ///
            /// - Parameters:
            ///   - captchaToken:
            public init(captchaToken: Swift.String? = nil) {
                self.captchaToken = captchaToken
            }
            public enum CodingKeys: String, CodingKey {
                case captchaToken = "captcha_token"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ErrorSchema`.
        public struct ErrorSchema: Codable, Hashable, Sendable {
            /// Certain responses will contain this property with the provided values.
            ///
            /// Usually one of these:
            ///   - invalid_request
            ///   - unauthorized_client
            ///   - access_denied
            ///   - server_error
            ///   - temporarily_unavailable
            ///   - unsupported_otp_type
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorSchema/error`.
            public var error: Swift.String?
            /// Certain responses that have an `error` property may have this property which describes the error.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorSchema/error_description`.
            public var errorDescription: Swift.String?
            /// The HTTP status code. Usually missing if `error` is present.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorSchema/code`.
            public var code: Swift.Int?
            /// A basic message describing the problem with the request. Usually missing if `error` is present.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorSchema/msg`.
            public var msg: Swift.String?
            /// A short code used to describe the class of error encountered.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorSchema/error_code`.
            public var errorCode: Swift.String?
            /// Only returned on the `/signup` endpoint if the password used is too weak. Inspect the `reasons` and `msg` property to identify the causes.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorSchema/weak_password`.
            public struct WeakPasswordPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ErrorSchema/weak_password/ReasonsPayload`.
                @frozen public enum ReasonsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case length = "length"
                    case characters = "characters"
                    case pwned = "pwned"
                }
                /// - Remark: Generated from `#/components/schemas/ErrorSchema/weak_password/reasons`.
                public typealias ReasonsPayload = [Components.Schemas.ErrorSchema.WeakPasswordPayload.ReasonsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/ErrorSchema/weak_password/reasons`.
                public var reasons: Components.Schemas.ErrorSchema.WeakPasswordPayload.ReasonsPayload?
                /// Creates a new `WeakPasswordPayload`.
                ///
                /// - Parameters:
                ///   - reasons:
                public init(reasons: Components.Schemas.ErrorSchema.WeakPasswordPayload.ReasonsPayload? = nil) {
                    self.reasons = reasons
                }
                public enum CodingKeys: String, CodingKey {
                    case reasons
                }
            }
            /// Only returned on the `/signup` endpoint if the password used is too weak. Inspect the `reasons` and `msg` property to identify the causes.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ErrorSchema/weak_password`.
            public var weakPassword: Components.Schemas.ErrorSchema.WeakPasswordPayload?
            /// Creates a new `ErrorSchema`.
            ///
            /// - Parameters:
            ///   - error: Certain responses will contain this property with the provided values.
            ///   - errorDescription: Certain responses that have an `error` property may have this property which describes the error.
            ///   - code: The HTTP status code. Usually missing if `error` is present.
            ///   - msg: A basic message describing the problem with the request. Usually missing if `error` is present.
            ///   - errorCode: A short code used to describe the class of error encountered.
            ///   - weakPassword: Only returned on the `/signup` endpoint if the password used is too weak. Inspect the `reasons` and `msg` property to identify the causes.
            public init(
                error: Swift.String? = nil,
                errorDescription: Swift.String? = nil,
                code: Swift.Int? = nil,
                msg: Swift.String? = nil,
                errorCode: Swift.String? = nil,
                weakPassword: Components.Schemas.ErrorSchema.WeakPasswordPayload? = nil
            ) {
                self.error = error
                self.errorDescription = errorDescription
                self.code = code
                self.msg = msg
                self.errorCode = errorCode
                self.weakPassword = weakPassword
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case errorDescription = "error_description"
                case code
                case msg
                case errorCode = "error_code"
                case weakPassword = "weak_password"
            }
        }
        /// Object describing the user related to the issued access and refresh tokens.
        ///
        /// - Remark: Generated from `#/components/schemas/UserSchema`.
        public struct UserSchema: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserSchema/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserSchema/aud`.
            @available(*, deprecated)
            public var aud: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserSchema/role`.
            public var role: Swift.String?
            /// User's primary contact email. In most cases you can uniquely identify a user by their email address, but not in all cases.
            ///
            /// - Remark: Generated from `#/components/schemas/UserSchema/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserSchema/email_confirmed_at`.
            public var emailConfirmedAt: Foundation.Date?
            /// User's primary contact phone number. In most cases you can uniquely identify a user by their phone number, but not in all cases.
            ///
            /// - Remark: Generated from `#/components/schemas/UserSchema/phone`.
            public var phone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserSchema/phone_confirmed_at`.
            public var phoneConfirmedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/confirmation_sent_at`.
            public var confirmationSentAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/confirmed_at`.
            public var confirmedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/recovery_sent_at`.
            public var recoverySentAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/new_email`.
            public var newEmail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserSchema/email_change_sent_at`.
            public var emailChangeSentAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/new_phone`.
            public var newPhone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserSchema/phone_change_sent_at`.
            public var phoneChangeSentAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/reauthentication_sent_at`.
            public var reauthenticationSentAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/last_sign_in_at`.
            public var lastSignInAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/app_metadata`.
            public var appMetadata: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/UserSchema/user_metadata`.
            public var userMetadata: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/UserSchema/factors`.
            public var factors: [Components.Schemas.MFAFactorSchema]?
            /// - Remark: Generated from `#/components/schemas/UserSchema/identities`.
            public var identities: [Components.Schemas.IdentitySchema]?
            /// - Remark: Generated from `#/components/schemas/UserSchema/banned_until`.
            public var bannedUntil: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/created_at`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/updated_at`.
            public var updatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/deleted_at`.
            public var deletedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSchema/is_anonymous`.
            public var isAnonymous: Swift.Bool?
            /// Creates a new `UserSchema`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - aud:
            ///   - role:
            ///   - email: User's primary contact email. In most cases you can uniquely identify a user by their email address, but not in all cases.
            ///   - emailConfirmedAt:
            ///   - phone: User's primary contact phone number. In most cases you can uniquely identify a user by their phone number, but not in all cases.
            ///   - phoneConfirmedAt:
            ///   - confirmationSentAt:
            ///   - confirmedAt:
            ///   - recoverySentAt:
            ///   - newEmail:
            ///   - emailChangeSentAt:
            ///   - newPhone:
            ///   - phoneChangeSentAt:
            ///   - reauthenticationSentAt:
            ///   - lastSignInAt:
            ///   - appMetadata:
            ///   - userMetadata:
            ///   - factors:
            ///   - identities:
            ///   - bannedUntil:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - deletedAt:
            ///   - isAnonymous:
            public init(
                id: Swift.String? = nil,
                aud: Swift.String? = nil,
                role: Swift.String? = nil,
                email: Swift.String? = nil,
                emailConfirmedAt: Foundation.Date? = nil,
                phone: Swift.String? = nil,
                phoneConfirmedAt: Foundation.Date? = nil,
                confirmationSentAt: Foundation.Date? = nil,
                confirmedAt: Foundation.Date? = nil,
                recoverySentAt: Foundation.Date? = nil,
                newEmail: Swift.String? = nil,
                emailChangeSentAt: Foundation.Date? = nil,
                newPhone: Swift.String? = nil,
                phoneChangeSentAt: Foundation.Date? = nil,
                reauthenticationSentAt: Foundation.Date? = nil,
                lastSignInAt: Foundation.Date? = nil,
                appMetadata: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                userMetadata: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                factors: [Components.Schemas.MFAFactorSchema]? = nil,
                identities: [Components.Schemas.IdentitySchema]? = nil,
                bannedUntil: Foundation.Date? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                deletedAt: Foundation.Date? = nil,
                isAnonymous: Swift.Bool? = nil
            ) {
                self.id = id
                self.aud = aud
                self.role = role
                self.email = email
                self.emailConfirmedAt = emailConfirmedAt
                self.phone = phone
                self.phoneConfirmedAt = phoneConfirmedAt
                self.confirmationSentAt = confirmationSentAt
                self.confirmedAt = confirmedAt
                self.recoverySentAt = recoverySentAt
                self.newEmail = newEmail
                self.emailChangeSentAt = emailChangeSentAt
                self.newPhone = newPhone
                self.phoneChangeSentAt = phoneChangeSentAt
                self.reauthenticationSentAt = reauthenticationSentAt
                self.lastSignInAt = lastSignInAt
                self.appMetadata = appMetadata
                self.userMetadata = userMetadata
                self.factors = factors
                self.identities = identities
                self.bannedUntil = bannedUntil
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.deletedAt = deletedAt
                self.isAnonymous = isAnonymous
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case aud
                case role
                case email
                case emailConfirmedAt = "email_confirmed_at"
                case phone
                case phoneConfirmedAt = "phone_confirmed_at"
                case confirmationSentAt = "confirmation_sent_at"
                case confirmedAt = "confirmed_at"
                case recoverySentAt = "recovery_sent_at"
                case newEmail = "new_email"
                case emailChangeSentAt = "email_change_sent_at"
                case newPhone = "new_phone"
                case phoneChangeSentAt = "phone_change_sent_at"
                case reauthenticationSentAt = "reauthentication_sent_at"
                case lastSignInAt = "last_sign_in_at"
                case appMetadata = "app_metadata"
                case userMetadata = "user_metadata"
                case factors
                case identities
                case bannedUntil = "banned_until"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case deletedAt = "deleted_at"
                case isAnonymous = "is_anonymous"
            }
        }
        /// - Remark: Generated from `#/components/schemas/SAMLAttributeMappingSchema`.
        public struct SAMLAttributeMappingSchema: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SAMLAttributeMappingSchema/keys`.
            public var keys: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `SAMLAttributeMappingSchema`.
            ///
            /// - Parameters:
            ///   - keys:
            public init(keys: OpenAPIRuntime.OpenAPIObjectContainer? = nil) {
                self.keys = keys
            }
            public enum CodingKeys: String, CodingKey {
                case keys
            }
        }
        /// - Remark: Generated from `#/components/schemas/SSOProviderSchema`.
        public struct SSOProviderSchema: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/SsoDomainsPayload`.
            public struct SsoDomainsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/SsoDomainsPayload/domain`.
                public var domain: Swift.String?
                /// Creates a new `SsoDomainsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - domain:
                public init(domain: Swift.String? = nil) {
                    self.domain = domain
                }
                public enum CodingKeys: String, CodingKey {
                    case domain
                }
            }
            /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/sso_domains`.
            public typealias SsoDomainsPayload = [Components.Schemas.SSOProviderSchema.SsoDomainsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/sso_domains`.
            public var ssoDomains: Components.Schemas.SSOProviderSchema.SsoDomainsPayload?
            /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/saml`.
            public struct SamlPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/saml/entity_id`.
                public var entityId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/saml/metadata_xml`.
                public var metadataXml: Swift.String?
                /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/saml/metadata_url`.
                public var metadataUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/saml/attribute_mapping`.
                public var attributeMapping: Components.Schemas.SAMLAttributeMappingSchema?
                /// Creates a new `SamlPayload`.
                ///
                /// - Parameters:
                ///   - entityId:
                ///   - metadataXml:
                ///   - metadataUrl:
                ///   - attributeMapping:
                public init(
                    entityId: Swift.String? = nil,
                    metadataXml: Swift.String? = nil,
                    metadataUrl: Swift.String? = nil,
                    attributeMapping: Components.Schemas.SAMLAttributeMappingSchema? = nil
                ) {
                    self.entityId = entityId
                    self.metadataXml = metadataXml
                    self.metadataUrl = metadataUrl
                    self.attributeMapping = attributeMapping
                }
                public enum CodingKeys: String, CodingKey {
                    case entityId = "entity_id"
                    case metadataXml = "metadata_xml"
                    case metadataUrl = "metadata_url"
                    case attributeMapping = "attribute_mapping"
                }
            }
            /// - Remark: Generated from `#/components/schemas/SSOProviderSchema/saml`.
            public var saml: Components.Schemas.SSOProviderSchema.SamlPayload?
            /// Creates a new `SSOProviderSchema`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - ssoDomains:
            ///   - saml:
            public init(
                id: Swift.String? = nil,
                ssoDomains: Components.Schemas.SSOProviderSchema.SsoDomainsPayload? = nil,
                saml: Components.Schemas.SSOProviderSchema.SamlPayload? = nil
            ) {
                self.id = id
                self.ssoDomains = ssoDomains
                self.saml = saml
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case ssoDomains = "sso_domains"
                case saml
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema`.
        public struct AccessTokenResponseSchema: Codable, Hashable, Sendable {
            /// A valid JWT that will expire in `expires_in` seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/access_token`.
            public var accessToken: Swift.String?
            /// An opaque string that can be used once to obtain a new access and refresh token.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/refresh_token`.
            public var refreshToken: Swift.String?
            /// What type of token this is. Only `bearer` returned, may change in the future.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/token_type`.
            public var tokenType: Swift.String?
            /// Number of seconds after which the `access_token` should be renewed by using the refresh token with the `refresh_token` grant type.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/expires_in`.
            public var expiresIn: Swift.Int?
            /// UNIX timestamp after which the `access_token` should be renewed by using the refresh token with the `refresh_token` grant type.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/expires_at`.
            public var expiresAt: Swift.Int?
            /// Only returned on the `/token?grant_type=password` endpoint. When present, it indicates that the password used is weak. Inspect the `reasons` and/or `message` properties to identify why.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/weak_password`.
            public struct WeakPasswordPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/weak_password/ReasonsPayload`.
                @frozen public enum ReasonsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case length = "length"
                    case characters = "characters"
                    case pwned = "pwned"
                }
                /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/weak_password/reasons`.
                public typealias ReasonsPayload = [Components.Schemas.AccessTokenResponseSchema.WeakPasswordPayload.ReasonsPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/weak_password/reasons`.
                public var reasons: Components.Schemas.AccessTokenResponseSchema.WeakPasswordPayload.ReasonsPayload?
                /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/weak_password/message`.
                public var message: Swift.String?
                /// Creates a new `WeakPasswordPayload`.
                ///
                /// - Parameters:
                ///   - reasons:
                ///   - message:
                public init(
                    reasons: Components.Schemas.AccessTokenResponseSchema.WeakPasswordPayload.ReasonsPayload? = nil,
                    message: Swift.String? = nil
                ) {
                    self.reasons = reasons
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case reasons
                    case message
                }
            }
            /// Only returned on the `/token?grant_type=password` endpoint. When present, it indicates that the password used is weak. Inspect the `reasons` and/or `message` properties to identify why.
            ///
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/weak_password`.
            public var weakPassword: Components.Schemas.AccessTokenResponseSchema.WeakPasswordPayload?
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponseSchema/user`.
            public var user: Components.Schemas.UserSchema?
            /// Creates a new `AccessTokenResponseSchema`.
            ///
            /// - Parameters:
            ///   - accessToken: A valid JWT that will expire in `expires_in` seconds.
            ///   - refreshToken: An opaque string that can be used once to obtain a new access and refresh token.
            ///   - tokenType: What type of token this is. Only `bearer` returned, may change in the future.
            ///   - expiresIn: Number of seconds after which the `access_token` should be renewed by using the refresh token with the `refresh_token` grant type.
            ///   - expiresAt: UNIX timestamp after which the `access_token` should be renewed by using the refresh token with the `refresh_token` grant type.
            ///   - weakPassword: Only returned on the `/token?grant_type=password` endpoint. When present, it indicates that the password used is weak. Inspect the `reasons` and/or `message` properties to identify why.
            ///   - user:
            public init(
                accessToken: Swift.String? = nil,
                refreshToken: Swift.String? = nil,
                tokenType: Swift.String? = nil,
                expiresIn: Swift.Int? = nil,
                expiresAt: Swift.Int? = nil,
                weakPassword: Components.Schemas.AccessTokenResponseSchema.WeakPasswordPayload? = nil,
                user: Components.Schemas.UserSchema? = nil
            ) {
                self.accessToken = accessToken
                self.refreshToken = refreshToken
                self.tokenType = tokenType
                self.expiresIn = expiresIn
                self.expiresAt = expiresAt
                self.weakPassword = weakPassword
                self.user = user
            }
            public enum CodingKeys: String, CodingKey {
                case accessToken = "access_token"
                case refreshToken = "refresh_token"
                case tokenType = "token_type"
                case expiresIn = "expires_in"
                case expiresAt = "expires_at"
                case weakPassword = "weak_password"
                case user
            }
        }
        /// Represents a MFA factor.
        ///
        /// - Remark: Generated from `#/components/schemas/MFAFactorSchema`.
        public struct MFAFactorSchema: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MFAFactorSchema/id`.
            public var id: Swift.String?
            /// Usually one of:
            /// - verified
            /// - unverified
            ///
            /// - Remark: Generated from `#/components/schemas/MFAFactorSchema/status`.
            public var status: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MFAFactorSchema/friendly_name`.
            public var friendlyName: Swift.String?
            /// Usually one of:
            /// - totp
            /// - phone
            /// - webauthn
            ///
            /// - Remark: Generated from `#/components/schemas/MFAFactorSchema/factor_type`.
            public var factorType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MFAFactorSchema/web_authn_credential`.
            public var webAuthnCredential: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MFAFactorSchema/phone`.
            public var phone: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MFAFactorSchema/created_at`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/MFAFactorSchema/updated_at`.
            public var updatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/MFAFactorSchema/last_challenged_at`.
            public var lastChallengedAt: Foundation.Date?
            /// Creates a new `MFAFactorSchema`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - status: Usually one of:
            ///   - friendlyName:
            ///   - factorType: Usually one of:
            ///   - webAuthnCredential:
            ///   - phone:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - lastChallengedAt:
            public init(
                id: Swift.String? = nil,
                status: Swift.String? = nil,
                friendlyName: Swift.String? = nil,
                factorType: Swift.String? = nil,
                webAuthnCredential: Swift.String? = nil,
                phone: Swift.String? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                lastChallengedAt: Foundation.Date? = nil
            ) {
                self.id = id
                self.status = status
                self.friendlyName = friendlyName
                self.factorType = factorType
                self.webAuthnCredential = webAuthnCredential
                self.phone = phone
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.lastChallengedAt = lastChallengedAt
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case status
                case friendlyName = "friendly_name"
                case factorType = "factor_type"
                case webAuthnCredential = "web_authn_credential"
                case phone
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case lastChallengedAt = "last_challenged_at"
            }
        }
        /// - Remark: Generated from `#/components/schemas/IdentitySchema`.
        public struct IdentitySchema: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IdentitySchema/identity_id`.
            public var identityId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IdentitySchema/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IdentitySchema/user_id`.
            public var userId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IdentitySchema/identity_data`.
            public var identityData: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/IdentitySchema/provider`.
            public var provider: Swift.String?
            /// - Remark: Generated from `#/components/schemas/IdentitySchema/last_sign_in_at`.
            public var lastSignInAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/IdentitySchema/created_at`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/IdentitySchema/updated_at`.
            public var updatedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/IdentitySchema/email`.
            public var email: Swift.String?
            /// Creates a new `IdentitySchema`.
            ///
            /// - Parameters:
            ///   - identityId:
            ///   - id:
            ///   - userId:
            ///   - identityData:
            ///   - provider:
            ///   - lastSignInAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - email:
            public init(
                identityId: Swift.String? = nil,
                id: Swift.String? = nil,
                userId: Swift.String? = nil,
                identityData: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                provider: Swift.String? = nil,
                lastSignInAt: Foundation.Date? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil,
                email: Swift.String? = nil
            ) {
                self.identityId = identityId
                self.id = id
                self.userId = userId
                self.identityData = identityData
                self.provider = provider
                self.lastSignInAt = lastSignInAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.email = email
            }
            public enum CodingKeys: String, CodingKey {
                case identityId = "identity_id"
                case id
                case userId = "user_id"
                case identityData = "identity_data"
                case provider
                case lastSignInAt = "last_sign_in_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case email
            }
        }
        /// - Remark: Generated from `#/components/schemas/TOTPPhoneChallengeResponse`.
        public struct TOTPPhoneChallengeResponse: Codable, Hashable, Sendable {
            /// ID of the challenge.
            ///
            /// - Remark: Generated from `#/components/schemas/TOTPPhoneChallengeResponse/id`.
            public var id: Swift.String
            /// Type of the challenge.
            ///
            /// - Remark: Generated from `#/components/schemas/TOTPPhoneChallengeResponse/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case totp = "totp"
                case phone = "phone"
            }
            /// Type of the challenge.
            ///
            /// - Remark: Generated from `#/components/schemas/TOTPPhoneChallengeResponse/type`.
            public var _type: Components.Schemas.TOTPPhoneChallengeResponse._TypePayload
            /// UNIX seconds of the timestamp past which the challenge should not be verified.
            ///
            /// - Remark: Generated from `#/components/schemas/TOTPPhoneChallengeResponse/expires_at`.
            public var expiresAt: Swift.Int
            /// Creates a new `TOTPPhoneChallengeResponse`.
            ///
            /// - Parameters:
            ///   - id: ID of the challenge.
            ///   - _type: Type of the challenge.
            ///   - expiresAt: UNIX seconds of the timestamp past which the challenge should not be verified.
            public init(
                id: Swift.String,
                _type: Components.Schemas.TOTPPhoneChallengeResponse._TypePayload,
                expiresAt: Swift.Int
            ) {
                self.id = id
                self._type = _type
                self.expiresAt = expiresAt
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case expiresAt = "expires_at"
            }
        }
        /// - Remark: Generated from `#/components/schemas/WebAuthnChallengeResponse`.
        public struct WebAuthnChallengeResponse: Codable, Hashable, Sendable {
            /// ID of the challenge.
            ///
            /// - Remark: Generated from `#/components/schemas/WebAuthnChallengeResponse/id`.
            public var id: Swift.String
            /// Type of the challenge.
            ///
            /// - Remark: Generated from `#/components/schemas/WebAuthnChallengeResponse/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case webauthn = "webauthn"
            }
            /// Type of the challenge.
            ///
            /// - Remark: Generated from `#/components/schemas/WebAuthnChallengeResponse/type`.
            public var _type: Components.Schemas.WebAuthnChallengeResponse._TypePayload
            /// UNIX seconds of the timestamp past which the challenge should not be verified.
            ///
            /// - Remark: Generated from `#/components/schemas/WebAuthnChallengeResponse/expires_at`.
            public var expiresAt: Swift.Int
            /// - Remark: Generated from `#/components/schemas/WebAuthnChallengeResponse/credential_request_options`.
            public var credentialRequestOptions: Components.Schemas.CredentialRequestOptions?
            /// - Remark: Generated from `#/components/schemas/WebAuthnChallengeResponse/credential_creation_options`.
            public var credentialCreationOptions: Components.Schemas.CredentialCreationOptions?
            /// Creates a new `WebAuthnChallengeResponse`.
            ///
            /// - Parameters:
            ///   - id: ID of the challenge.
            ///   - _type: Type of the challenge.
            ///   - expiresAt: UNIX seconds of the timestamp past which the challenge should not be verified.
            ///   - credentialRequestOptions:
            ///   - credentialCreationOptions:
            public init(
                id: Swift.String,
                _type: Components.Schemas.WebAuthnChallengeResponse._TypePayload,
                expiresAt: Swift.Int,
                credentialRequestOptions: Components.Schemas.CredentialRequestOptions? = nil,
                credentialCreationOptions: Components.Schemas.CredentialCreationOptions? = nil
            ) {
                self.id = id
                self._type = _type
                self.expiresAt = expiresAt
                self.credentialRequestOptions = credentialRequestOptions
                self.credentialCreationOptions = credentialCreationOptions
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case expiresAt = "expires_at"
                case credentialRequestOptions = "credential_request_options"
                case credentialCreationOptions = "credential_creation_options"
            }
        }
        /// WebAuthn credential assertion options
        ///
        /// - Remark: Generated from `#/components/schemas/CredentialAssertion`.
        public struct CredentialAssertion: Codable, Hashable, Sendable {
            /// A random challenge generated by the server, base64url encoded
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/challenge`.
            public var challenge: Swift.String
            /// The relying party's identifier (usually the domain name)
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/rpId`.
            public var rpId: Swift.String
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/AllowCredentialsPayload`.
            public struct AllowCredentialsPayloadPayload: Codable, Hashable, Sendable {
                /// Credential ID, base64url encoded
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialAssertion/AllowCredentialsPayload/id`.
                public var id: Swift.String
                /// Type of the credential
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialAssertion/AllowCredentialsPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case publicKey = "public-key"
                }
                /// Type of the credential
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialAssertion/AllowCredentialsPayload/type`.
                public var _type: Components.Schemas.CredentialAssertion.AllowCredentialsPayloadPayload._TypePayload
                /// Creates a new `AllowCredentialsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id: Credential ID, base64url encoded
                ///   - _type: Type of the credential
                public init(
                    id: Swift.String,
                    _type: Components.Schemas.CredentialAssertion.AllowCredentialsPayloadPayload._TypePayload
                ) {
                    self.id = id
                    self._type = _type
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case _type = "type"
                }
            }
            /// List of credentials acceptable for this authentication
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/allowCredentials`.
            public typealias AllowCredentialsPayload = [Components.Schemas.CredentialAssertion.AllowCredentialsPayloadPayload]
            /// List of credentials acceptable for this authentication
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/allowCredentials`.
            public var allowCredentials: Components.Schemas.CredentialAssertion.AllowCredentialsPayload
            /// Time (in milliseconds) that the user has to respond to the authentication prompt
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/timeout`.
            public var timeout: Swift.Int
            /// The relying party's requirements for user verification
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/userVerification`.
            @frozen public enum UserVerificationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case required = "required"
                case preferred = "preferred"
                case discouraged = "discouraged"
            }
            /// The relying party's requirements for user verification
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/userVerification`.
            public var userVerification: Components.Schemas.CredentialAssertion.UserVerificationPayload?
            /// Additional parameters requesting additional processing by the client
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/extensions`.
            public var extensions: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Status of the credential assertion
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/status`.
            @frozen public enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case ok = "ok"
                case failed = "failed"
            }
            /// Status of the credential assertion
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/status`.
            public var status: Components.Schemas.CredentialAssertion.StatusPayload?
            /// Error message if the assertion failed
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/errorMessage`.
            public var errorMessage: Swift.String?
            /// User handle, base64url encoded
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/userHandle`.
            public var userHandle: Swift.String?
            /// Type of authenticator to use
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/authenticatorAttachment`.
            @frozen public enum AuthenticatorAttachmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case platform = "platform"
                case crossPlatform = "cross-platform"
            }
            /// Type of authenticator to use
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialAssertion/authenticatorAttachment`.
            public var authenticatorAttachment: Components.Schemas.CredentialAssertion.AuthenticatorAttachmentPayload?
            /// Creates a new `CredentialAssertion`.
            ///
            /// - Parameters:
            ///   - challenge: A random challenge generated by the server, base64url encoded
            ///   - rpId: The relying party's identifier (usually the domain name)
            ///   - allowCredentials: List of credentials acceptable for this authentication
            ///   - timeout: Time (in milliseconds) that the user has to respond to the authentication prompt
            ///   - userVerification: The relying party's requirements for user verification
            ///   - extensions: Additional parameters requesting additional processing by the client
            ///   - status: Status of the credential assertion
            ///   - errorMessage: Error message if the assertion failed
            ///   - userHandle: User handle, base64url encoded
            ///   - authenticatorAttachment: Type of authenticator to use
            public init(
                challenge: Swift.String,
                rpId: Swift.String,
                allowCredentials: Components.Schemas.CredentialAssertion.AllowCredentialsPayload,
                timeout: Swift.Int,
                userVerification: Components.Schemas.CredentialAssertion.UserVerificationPayload? = nil,
                extensions: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                status: Components.Schemas.CredentialAssertion.StatusPayload? = nil,
                errorMessage: Swift.String? = nil,
                userHandle: Swift.String? = nil,
                authenticatorAttachment: Components.Schemas.CredentialAssertion.AuthenticatorAttachmentPayload? = nil
            ) {
                self.challenge = challenge
                self.rpId = rpId
                self.allowCredentials = allowCredentials
                self.timeout = timeout
                self.userVerification = userVerification
                self.extensions = extensions
                self.status = status
                self.errorMessage = errorMessage
                self.userHandle = userHandle
                self.authenticatorAttachment = authenticatorAttachment
            }
            public enum CodingKeys: String, CodingKey {
                case challenge
                case rpId
                case allowCredentials
                case timeout
                case userVerification
                case extensions
                case status
                case errorMessage
                case userHandle
                case authenticatorAttachment
            }
        }
        /// WebAuthn credential request (for the response from the client)
        ///
        /// - Remark: Generated from `#/components/schemas/CredentialRequest`.
        public struct CredentialRequest: Codable, Hashable, Sendable {
            /// Base64url encoding of the credential ID
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialRequest/id`.
            public var id: Swift.String
            /// Base64url encoding of the credential ID (same as id)
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialRequest/rawId`.
            public var rawId: Swift.String
            /// Type of the credential
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialRequest/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case publicKey = "public-key"
            }
            /// Type of the credential
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialRequest/type`.
            public var _type: Components.Schemas.CredentialRequest._TypePayload
            /// - Remark: Generated from `#/components/schemas/CredentialRequest/response`.
            public struct ResponsePayload: Codable, Hashable, Sendable {
                /// Base64url encoding of the client data
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialRequest/response/clientDataJSON`.
                public var clientDataJSON: Swift.String
                /// Base64url encoding of the authenticator data
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialRequest/response/authenticatorData`.
                public var authenticatorData: Swift.String
                /// Base64url encoding of the signature
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialRequest/response/signature`.
                public var signature: Swift.String
                /// Base64url encoding of the user handle
                ///
                /// - Remark: Generated from `#/components/schemas/CredentialRequest/response/userHandle`.
                public var userHandle: Swift.String
                /// Creates a new `ResponsePayload`.
                ///
                /// - Parameters:
                ///   - clientDataJSON: Base64url encoding of the client data
                ///   - authenticatorData: Base64url encoding of the authenticator data
                ///   - signature: Base64url encoding of the signature
                ///   - userHandle: Base64url encoding of the user handle
                public init(
                    clientDataJSON: Swift.String,
                    authenticatorData: Swift.String,
                    signature: Swift.String,
                    userHandle: Swift.String
                ) {
                    self.clientDataJSON = clientDataJSON
                    self.authenticatorData = authenticatorData
                    self.signature = signature
                    self.userHandle = userHandle
                }
                public enum CodingKeys: String, CodingKey {
                    case clientDataJSON
                    case authenticatorData
                    case signature
                    case userHandle
                }
            }
            /// - Remark: Generated from `#/components/schemas/CredentialRequest/response`.
            public var response: Components.Schemas.CredentialRequest.ResponsePayload
            /// Client extension results
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialRequest/clientExtensionResults`.
            public var clientExtensionResults: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `CredentialRequest`.
            ///
            /// - Parameters:
            ///   - id: Base64url encoding of the credential ID
            ///   - rawId: Base64url encoding of the credential ID (same as id)
            ///   - _type: Type of the credential
            ///   - response:
            ///   - clientExtensionResults: Client extension results
            public init(
                id: Swift.String,
                rawId: Swift.String,
                _type: Components.Schemas.CredentialRequest._TypePayload,
                response: Components.Schemas.CredentialRequest.ResponsePayload,
                clientExtensionResults: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.id = id
                self.rawId = rawId
                self._type = _type
                self.response = response
                self.clientExtensionResults = clientExtensionResults
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case rawId
                case _type = "type"
                case response
                case clientExtensionResults
            }
        }
        /// Options for requesting an assertion
        ///
        /// - Remark: Generated from `#/components/schemas/CredentialRequestOptions`.
        public struct CredentialRequestOptions: Codable, Hashable, Sendable {
            /// A challenge to be signed by the authenticator
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialRequestOptions/challenge`.
            public var challenge: OpenAPIRuntime.Base64EncodedData?
            /// Time (in milliseconds) that the caller is willing to wait for the call to complete
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialRequestOptions/timeout`.
            public var timeout: Swift.Int?
            /// Relying Party ID
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialRequestOptions/rpId`.
            public var rpId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CredentialRequestOptions/allowCredentials`.
            public var allowCredentials: [Components.Schemas.PublicKeyCredentialDescriptor]?
            /// User verification requirement
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialRequestOptions/userVerification`.
            @frozen public enum UserVerificationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case required = "required"
                case preferred = "preferred"
                case discouraged = "discouraged"
            }
            /// User verification requirement
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialRequestOptions/userVerification`.
            public var userVerification: Components.Schemas.CredentialRequestOptions.UserVerificationPayload?
            /// Creates a new `CredentialRequestOptions`.
            ///
            /// - Parameters:
            ///   - challenge: A challenge to be signed by the authenticator
            ///   - timeout: Time (in milliseconds) that the caller is willing to wait for the call to complete
            ///   - rpId: Relying Party ID
            ///   - allowCredentials:
            ///   - userVerification: User verification requirement
            public init(
                challenge: OpenAPIRuntime.Base64EncodedData? = nil,
                timeout: Swift.Int? = nil,
                rpId: Swift.String? = nil,
                allowCredentials: [Components.Schemas.PublicKeyCredentialDescriptor]? = nil,
                userVerification: Components.Schemas.CredentialRequestOptions.UserVerificationPayload? = nil
            ) {
                self.challenge = challenge
                self.timeout = timeout
                self.rpId = rpId
                self.allowCredentials = allowCredentials
                self.userVerification = userVerification
            }
            public enum CodingKeys: String, CodingKey {
                case challenge
                case timeout
                case rpId
                case allowCredentials
                case userVerification
            }
        }
        /// Options for creating a new credential
        ///
        /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions`.
        public struct CredentialCreationOptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/rp`.
            public struct RpPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/rp/id`.
                public var id: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/rp/name`.
                public var name: Swift.String?
                /// Creates a new `RpPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - name:
                public init(
                    id: Swift.String? = nil,
                    name: Swift.String? = nil
                ) {
                    self.id = id
                    self.name = name
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/rp`.
            public var rp: Components.Schemas.CredentialCreationOptions.RpPayload?
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/user`.
            public var user: Components.Schemas.UserSchema?
            /// A challenge to be signed by the authenticator
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/challenge`.
            public var challenge: OpenAPIRuntime.Base64EncodedData?
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/PubKeyCredParamsPayload`.
            public struct PubKeyCredParamsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/PubKeyCredParamsPayload/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case publicKey = "public-key"
                }
                /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/PubKeyCredParamsPayload/type`.
                public var _type: Components.Schemas.CredentialCreationOptions.PubKeyCredParamsPayloadPayload._TypePayload?
                /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/PubKeyCredParamsPayload/alg`.
                public var alg: Swift.Int?
                /// Creates a new `PubKeyCredParamsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - alg:
                public init(
                    _type: Components.Schemas.CredentialCreationOptions.PubKeyCredParamsPayloadPayload._TypePayload? = nil,
                    alg: Swift.Int? = nil
                ) {
                    self._type = _type
                    self.alg = alg
                }
                public enum CodingKeys: String, CodingKey {
                    case _type = "type"
                    case alg
                }
            }
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/pubKeyCredParams`.
            public typealias PubKeyCredParamsPayload = [Components.Schemas.CredentialCreationOptions.PubKeyCredParamsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/pubKeyCredParams`.
            public var pubKeyCredParams: Components.Schemas.CredentialCreationOptions.PubKeyCredParamsPayload?
            /// Time (in milliseconds) that the caller is willing to wait for the call to complete
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/timeout`.
            public var timeout: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/excludeCredentials`.
            public var excludeCredentials: [Components.Schemas.PublicKeyCredentialDescriptor]?
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/authenticatorSelection`.
            public struct AuthenticatorSelectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/authenticatorSelection/authenticatorAttachment`.
                @frozen public enum AuthenticatorAttachmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case platform = "platform"
                    case crossPlatform = "cross-platform"
                }
                /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/authenticatorSelection/authenticatorAttachment`.
                public var authenticatorAttachment: Components.Schemas.CredentialCreationOptions.AuthenticatorSelectionPayload.AuthenticatorAttachmentPayload?
                /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/authenticatorSelection/requireResidentKey`.
                public var requireResidentKey: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/authenticatorSelection/userVerification`.
                @frozen public enum UserVerificationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case required = "required"
                    case preferred = "preferred"
                    case discouraged = "discouraged"
                }
                /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/authenticatorSelection/userVerification`.
                public var userVerification: Components.Schemas.CredentialCreationOptions.AuthenticatorSelectionPayload.UserVerificationPayload?
                /// Creates a new `AuthenticatorSelectionPayload`.
                ///
                /// - Parameters:
                ///   - authenticatorAttachment:
                ///   - requireResidentKey:
                ///   - userVerification:
                public init(
                    authenticatorAttachment: Components.Schemas.CredentialCreationOptions.AuthenticatorSelectionPayload.AuthenticatorAttachmentPayload? = nil,
                    requireResidentKey: Swift.Bool? = nil,
                    userVerification: Components.Schemas.CredentialCreationOptions.AuthenticatorSelectionPayload.UserVerificationPayload? = nil
                ) {
                    self.authenticatorAttachment = authenticatorAttachment
                    self.requireResidentKey = requireResidentKey
                    self.userVerification = userVerification
                }
                public enum CodingKeys: String, CodingKey {
                    case authenticatorAttachment
                    case requireResidentKey
                    case userVerification
                }
            }
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/authenticatorSelection`.
            public var authenticatorSelection: Components.Schemas.CredentialCreationOptions.AuthenticatorSelectionPayload?
            /// Preferred attestation conveyance
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/attestation`.
            @frozen public enum AttestationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case indirect = "indirect"
                case direct = "direct"
            }
            /// Preferred attestation conveyance
            ///
            /// - Remark: Generated from `#/components/schemas/CredentialCreationOptions/attestation`.
            public var attestation: Components.Schemas.CredentialCreationOptions.AttestationPayload?
            /// Creates a new `CredentialCreationOptions`.
            ///
            /// - Parameters:
            ///   - rp:
            ///   - user:
            ///   - challenge: A challenge to be signed by the authenticator
            ///   - pubKeyCredParams:
            ///   - timeout: Time (in milliseconds) that the caller is willing to wait for the call to complete
            ///   - excludeCredentials:
            ///   - authenticatorSelection:
            ///   - attestation: Preferred attestation conveyance
            public init(
                rp: Components.Schemas.CredentialCreationOptions.RpPayload? = nil,
                user: Components.Schemas.UserSchema? = nil,
                challenge: OpenAPIRuntime.Base64EncodedData? = nil,
                pubKeyCredParams: Components.Schemas.CredentialCreationOptions.PubKeyCredParamsPayload? = nil,
                timeout: Swift.Int? = nil,
                excludeCredentials: [Components.Schemas.PublicKeyCredentialDescriptor]? = nil,
                authenticatorSelection: Components.Schemas.CredentialCreationOptions.AuthenticatorSelectionPayload? = nil,
                attestation: Components.Schemas.CredentialCreationOptions.AttestationPayload? = nil
            ) {
                self.rp = rp
                self.user = user
                self.challenge = challenge
                self.pubKeyCredParams = pubKeyCredParams
                self.timeout = timeout
                self.excludeCredentials = excludeCredentials
                self.authenticatorSelection = authenticatorSelection
                self.attestation = attestation
            }
            public enum CodingKeys: String, CodingKey {
                case rp
                case user
                case challenge
                case pubKeyCredParams
                case timeout
                case excludeCredentials
                case authenticatorSelection
                case attestation
            }
        }
        /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialDescriptor`.
        public struct PublicKeyCredentialDescriptor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialDescriptor/type`.
            @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case publicKey = "public-key"
            }
            /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialDescriptor/type`.
            public var _type: Components.Schemas.PublicKeyCredentialDescriptor._TypePayload?
            /// Credential ID
            ///
            /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialDescriptor/id`.
            public var id: OpenAPIRuntime.Base64EncodedData?
            /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialDescriptor/TransportsPayload`.
            @frozen public enum TransportsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case usb = "usb"
                case nfc = "nfc"
                case ble = "ble"
                case _internal = "internal"
            }
            /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialDescriptor/transports`.
            public typealias TransportsPayload = [Components.Schemas.PublicKeyCredentialDescriptor.TransportsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/PublicKeyCredentialDescriptor/transports`.
            public var transports: Components.Schemas.PublicKeyCredentialDescriptor.TransportsPayload?
            /// Creates a new `PublicKeyCredentialDescriptor`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - id: Credential ID
            ///   - transports:
            public init(
                _type: Components.Schemas.PublicKeyCredentialDescriptor._TypePayload? = nil,
                id: OpenAPIRuntime.Base64EncodedData? = nil,
                transports: Components.Schemas.PublicKeyCredentialDescriptor.TransportsPayload? = nil
            ) {
                self._type = _type
                self.id = id
                self.transports = transports
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case id
                case transports
            }
        }
        /// Represents an OAuth 2.1 client
        ///
        /// - Remark: Generated from `#/components/schemas/OAuthClientSchema`.
        public struct OAuthClientSchema: Codable, Hashable, Sendable {
            /// Unique client identifier
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/client_id`.
            public var clientId: Swift.String?
            /// Human-readable name of the client application
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/client_name`.
            public var clientName: Swift.String?
            /// Client secret for confidential clients (only returned on registration/regeneration)
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/client_secret`.
            public var clientSecret: Swift.String?
            /// Type of the client
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/client_type`.
            @frozen public enum ClientTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _public = "public"
                case confidential = "confidential"
            }
            /// Type of the client
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/client_type`.
            public var clientType: Components.Schemas.OAuthClientSchema.ClientTypePayload?
            /// Authentication method for the token endpoint
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/token_endpoint_auth_method`.
            @frozen public enum TokenEndpointAuthMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case clientSecretBasic = "client_secret_basic"
                case clientSecretPost = "client_secret_post"
            }
            /// Authentication method for the token endpoint
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/token_endpoint_auth_method`.
            public var tokenEndpointAuthMethod: Components.Schemas.OAuthClientSchema.TokenEndpointAuthMethodPayload?
            /// Registration type of the client
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/registration_type`.
            @frozen public enum RegistrationTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case dynamic = "dynamic"
                case manual = "manual"
            }
            /// Registration type of the client
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/registration_type`.
            public var registrationType: Components.Schemas.OAuthClientSchema.RegistrationTypePayload?
            /// URL of the client application's homepage
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/client_uri`.
            public var clientUri: Swift.String?
            /// Array of redirect URIs used by the client
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/redirect_uris`.
            public var redirectUris: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/GrantTypesPayload`.
            @frozen public enum GrantTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case authorizationCode = "authorization_code"
                case refreshToken = "refresh_token"
            }
            /// OAuth grant types the client is authorized to use
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/grant_types`.
            public typealias GrantTypesPayload = [Components.Schemas.OAuthClientSchema.GrantTypesPayloadPayload]
            /// OAuth grant types the client is authorized to use
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/grant_types`.
            public var grantTypes: Components.Schemas.OAuthClientSchema.GrantTypesPayload?
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/ResponseTypesPayload`.
            @frozen public enum ResponseTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case code = "code"
            }
            /// OAuth response types the client can use
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/response_types`.
            public typealias ResponseTypesPayload = [Components.Schemas.OAuthClientSchema.ResponseTypesPayloadPayload]
            /// OAuth response types the client can use
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/response_types`.
            public var responseTypes: Components.Schemas.OAuthClientSchema.ResponseTypesPayload?
            /// Space-separated list of scope values
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/scope`.
            public var scope: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/created_at`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/OAuthClientSchema/updated_at`.
            public var updatedAt: Foundation.Date?
            /// Creates a new `OAuthClientSchema`.
            ///
            /// - Parameters:
            ///   - clientId: Unique client identifier
            ///   - clientName: Human-readable name of the client application
            ///   - clientSecret: Client secret for confidential clients (only returned on registration/regeneration)
            ///   - clientType: Type of the client
            ///   - tokenEndpointAuthMethod: Authentication method for the token endpoint
            ///   - registrationType: Registration type of the client
            ///   - clientUri: URL of the client application's homepage
            ///   - redirectUris: Array of redirect URIs used by the client
            ///   - grantTypes: OAuth grant types the client is authorized to use
            ///   - responseTypes: OAuth response types the client can use
            ///   - scope: Space-separated list of scope values
            ///   - createdAt:
            ///   - updatedAt:
            public init(
                clientId: Swift.String? = nil,
                clientName: Swift.String? = nil,
                clientSecret: Swift.String? = nil,
                clientType: Components.Schemas.OAuthClientSchema.ClientTypePayload? = nil,
                tokenEndpointAuthMethod: Components.Schemas.OAuthClientSchema.TokenEndpointAuthMethodPayload? = nil,
                registrationType: Components.Schemas.OAuthClientSchema.RegistrationTypePayload? = nil,
                clientUri: Swift.String? = nil,
                redirectUris: [Swift.String]? = nil,
                grantTypes: Components.Schemas.OAuthClientSchema.GrantTypesPayload? = nil,
                responseTypes: Components.Schemas.OAuthClientSchema.ResponseTypesPayload? = nil,
                scope: Swift.String? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil
            ) {
                self.clientId = clientId
                self.clientName = clientName
                self.clientSecret = clientSecret
                self.clientType = clientType
                self.tokenEndpointAuthMethod = tokenEndpointAuthMethod
                self.registrationType = registrationType
                self.clientUri = clientUri
                self.redirectUris = redirectUris
                self.grantTypes = grantTypes
                self.responseTypes = responseTypes
                self.scope = scope
                self.createdAt = createdAt
                self.updatedAt = updatedAt
            }
            public enum CodingKeys: String, CodingKey {
                case clientId = "client_id"
                case clientName = "client_name"
                case clientSecret = "client_secret"
                case clientType = "client_type"
                case tokenEndpointAuthMethod = "token_endpoint_auth_method"
                case registrationType = "registration_type"
                case clientUri = "client_uri"
                case redirectUris = "redirect_uris"
                case grantTypes = "grant_types"
                case responseTypes = "response_types"
                case scope
                case createdAt = "created_at"
                case updatedAt = "updated_at"
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct OAuthCallbackRedirectResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/OAuthCallbackRedirectResponse/headers`.
            public struct Headers: Sendable, Hashable {
                /// URL containing the `error` and `error_description` query parameters.
                ///
                ///
                /// - Remark: Generated from `#/components/responses/OAuthCallbackRedirectResponse/headers/Location`.
                public var location: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - location: URL containing the `error` and `error_description` query parameters.
                public init(location: Swift.String? = nil) {
                    self.location = location
                }
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.OAuthCallbackRedirectResponse.Headers
            /// Creates a new `OAuthCallbackRedirectResponse`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            public init(headers: Components.Responses.OAuthCallbackRedirectResponse.Headers = .init()) {
                self.headers = headers
            }
        }
        public struct OAuthAuthorizeRedirectResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/OAuthAuthorizeRedirectResponse/headers`.
            public struct Headers: Sendable, Hashable {
                /// URL to which the user agent should redirect (or open in a browser for mobile apps).
                ///
                ///
                /// - Remark: Generated from `#/components/responses/OAuthAuthorizeRedirectResponse/headers/Location`.
                public var location: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - location: URL to which the user agent should redirect (or open in a browser for mobile apps).
                public init(location: Swift.String? = nil) {
                    self.location = location
                }
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.OAuthAuthorizeRedirectResponse.Headers
            /// Creates a new `OAuthAuthorizeRedirectResponse`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            public init(headers: Components.Responses.OAuthAuthorizeRedirectResponse.Headers = .init()) {
                self.headers = headers
            }
        }
        public struct RateLimitResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/RateLimitResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/RateLimitResponse/content/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/RateLimitResponse/content/json/code`.
                    public var code: Swift.Int?
                    /// A basic message describing the rate limit breach. Do not use as an error code identifier.
                    ///
                    /// - Remark: Generated from `#/components/responses/RateLimitResponse/content/json/msg`.
                    public var msg: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - msg: A basic message describing the rate limit breach. Do not use as an error code identifier.
                    public init(
                        code: Swift.Int? = nil,
                        msg: Swift.String? = nil
                    ) {
                        self.code = code
                        self.msg = msg
                    }
                    public enum CodingKeys: String, CodingKey {
                        case code
                        case msg
                    }
                }
                /// - Remark: Generated from `#/components/responses/RateLimitResponse/content/application\/json`.
                case json(Components.Responses.RateLimitResponse.Body.JsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.RateLimitResponse.Body.JsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.RateLimitResponse.Body
            /// Creates a new `RateLimitResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.RateLimitResponse.Body) {
                self.body = body
            }
        }
        public struct BadRequestResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequestResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequestResponse/content/application\/json`.
                case json(Components.Schemas.ErrorSchema)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorSchema {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.BadRequestResponse.Body
            /// Creates a new `BadRequestResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.BadRequestResponse.Body) {
                self.body = body
            }
        }
        public struct UnauthorizedResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/UnauthorizedResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/UnauthorizedResponse/content/application\/json`.
                case json(Components.Schemas.ErrorSchema)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorSchema {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.UnauthorizedResponse.Body
            /// Creates a new `UnauthorizedResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.UnauthorizedResponse.Body) {
                self.body = body
            }
        }
        public struct ForbiddenResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/ForbiddenResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/ForbiddenResponse/content/application\/json`.
                case json(Components.Schemas.ErrorSchema)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorSchema {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.ForbiddenResponse.Body
            /// Creates a new `ForbiddenResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.ForbiddenResponse.Body) {
                self.body = body
            }
        }
        public struct InternalServerErrorResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InternalServerErrorResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InternalServerErrorResponse/content/application\/json`.
                case json(Components.Schemas.ErrorSchema)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas.ErrorSchema {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InternalServerErrorResponse.Body
            /// Creates a new `InternalServerErrorResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InternalServerErrorResponse.Body) {
                self.body = body
            }
        }
        public struct AccessRefreshTokenRedirectResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/AccessRefreshTokenRedirectResponse/headers`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/AccessRefreshTokenRedirectResponse/headers/Location`.
                public var location: Swift.String?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - location:
                public init(location: Swift.String? = nil) {
                    self.location = location
                }
            }
            /// Received HTTP response headers
            public var headers: Components.Responses.AccessRefreshTokenRedirectResponse.Headers
            /// Creates a new `AccessRefreshTokenRedirectResponse`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            public init(headers: Components.Responses.AccessRefreshTokenRedirectResponse.Headers = .init()) {
                self.headers = headers
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Issues access and refresh tokens based on grant type.
    ///
    /// - Remark: HTTP `POST /token`.
    /// - Remark: Generated from `#/paths//token/post`.
    public enum PostToken {
        public static let id: Swift.String = "post/token"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/token/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/token/POST/query/grant_type`.
                @frozen public enum GrantTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case password = "password"
                    case refreshToken = "refresh_token"
                    case idToken = "id_token"
                    case pkce = "pkce"
                    case web3 = "web3"
                }
                /// - What grant type should be used to issue an access and refresh token. Note: `id_token` is only offered in experimental mode. 
                /// - CAPTCHA protection does not apply on the `refresh_token` grant flow.
                /// - Using `password` is akin to a user signing in. 
                /// - `pkce` is used for exchanging the authorization code for a pair of access and refresh tokens.
                ///
                ///
                /// - Remark: Generated from `#/paths/token/POST/query/grant_type`.
                public var grantType: Operations.PostToken.Input.Query.GrantTypePayload
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - grantType:
                public init(grantType: Operations.PostToken.Input.Query.GrantTypePayload) {
                    self.grantType = grantType
                }
            }
            public var query: Operations.PostToken.Input.Query
            /// - Remark: Generated from `#/paths/token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostToken.Input.Headers
            /// - Remark: Generated from `#/paths/token/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// For the refresh token flow, supply only `refresh_token`.
                /// For the email/phone with password flow, supply `email`, `phone` and `password` with an optional `gotrue_meta_security`.
                /// For the OIDC ID token flow, supply `id_token`, `nonce`, `provider`, `client_id`, `issuer` with an optional `gotrue_meta_security`.
                /// For the Web3 flow, supply `message`, `signature`, and `chain`.
                ///
                /// - Remark: Generated from `#/paths/token/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/refresh_token`.
                    public var refreshToken: Swift.String?
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/password`.
                    public var password: Swift.String?
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/phone`.
                    public var phone: Swift.String?
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/id_token`.
                    public var idToken: Swift.String?
                    /// Provide only when `grant_type` is `id_token` and the provided ID token requires the presence of an access token to be accepted (usually by having an `at_hash` claim).
                    ///
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/access_token`.
                    public var accessToken: Swift.String?
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/nonce`.
                    public var nonce: Swift.String?
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/provider`.
                    @frozen public enum ProviderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case google = "google"
                        case apple = "apple"
                        case azure = "azure"
                        case facebook = "facebook"
                        case keycloak = "keycloak"
                    }
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/provider`.
                    public var provider: Operations.PostToken.Input.Body.JsonPayload.ProviderPayload?
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/client_id`.
                    public var clientId: Swift.String?
                    /// If `provider` is `azure` then you can specify any Azure OIDC issuer string here, which will be used for verification.
                    ///
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/issuer`.
                    public var issuer: Swift.String?
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/gotrue_meta_security`.
                    public var gotrueMetaSecurity: Components.Schemas.GoTrueSecurity?
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/auth_code`.
                    public var authCode: Swift.String?
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/code_verifier`.
                    public var codeVerifier: Swift.String?
                    /// Signed message for Web3 authentication following the Sign in with Solana (SIWS) or Sign in with Ethereum (SIWE) standard. Must include: `Issued At`, `URI`, `Version`.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/message`.
                    public var message: Swift.String?
                    /// The signature of the message for Web3 authentication. 
                    /// For Solana: Base64 or Base64-URL encoded. 
                    /// For Ethereum: hexadecimal string with 0x prefix.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/signature`.
                    public var signature: Swift.String?
                    /// What blockchain is the Web3 message and signature for.
                    ///
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/chain`.
                    @frozen public enum ChainPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case solana = "solana"
                        case ethereum = "ethereum"
                    }
                    /// What blockchain is the Web3 message and signature for.
                    ///
                    /// - Remark: Generated from `#/paths/token/POST/requestBody/json/chain`.
                    public var chain: Operations.PostToken.Input.Body.JsonPayload.ChainPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - refreshToken:
                    ///   - password:
                    ///   - email:
                    ///   - phone:
                    ///   - idToken:
                    ///   - accessToken: Provide only when `grant_type` is `id_token` and the provided ID token requires the presence of an access token to be accepted (usually by having an `at_hash` claim).
                    ///   - nonce:
                    ///   - provider:
                    ///   - clientId:
                    ///   - issuer: If `provider` is `azure` then you can specify any Azure OIDC issuer string here, which will be used for verification.
                    ///   - gotrueMetaSecurity:
                    ///   - authCode:
                    ///   - codeVerifier:
                    ///   - message: Signed message for Web3 authentication following the Sign in with Solana (SIWS) or Sign in with Ethereum (SIWE) standard. Must include: `Issued At`, `URI`, `Version`.
                    ///   - signature: The signature of the message for Web3 authentication. 
                    ///   - chain: What blockchain is the Web3 message and signature for.
                    public init(
                        refreshToken: Swift.String? = nil,
                        password: Swift.String? = nil,
                        email: Swift.String? = nil,
                        phone: Swift.String? = nil,
                        idToken: Swift.String? = nil,
                        accessToken: Swift.String? = nil,
                        nonce: Swift.String? = nil,
                        provider: Operations.PostToken.Input.Body.JsonPayload.ProviderPayload? = nil,
                        clientId: Swift.String? = nil,
                        issuer: Swift.String? = nil,
                        gotrueMetaSecurity: Components.Schemas.GoTrueSecurity? = nil,
                        authCode: Swift.String? = nil,
                        codeVerifier: Swift.String? = nil,
                        message: Swift.String? = nil,
                        signature: Swift.String? = nil,
                        chain: Operations.PostToken.Input.Body.JsonPayload.ChainPayload? = nil
                    ) {
                        self.refreshToken = refreshToken
                        self.password = password
                        self.email = email
                        self.phone = phone
                        self.idToken = idToken
                        self.accessToken = accessToken
                        self.nonce = nonce
                        self.provider = provider
                        self.clientId = clientId
                        self.issuer = issuer
                        self.gotrueMetaSecurity = gotrueMetaSecurity
                        self.authCode = authCode
                        self.codeVerifier = codeVerifier
                        self.message = message
                        self.signature = signature
                        self.chain = chain
                    }
                    public enum CodingKeys: String, CodingKey {
                        case refreshToken = "refresh_token"
                        case password
                        case email
                        case phone
                        case idToken = "id_token"
                        case accessToken = "access_token"
                        case nonce
                        case provider
                        case clientId = "client_id"
                        case issuer
                        case gotrueMetaSecurity = "gotrue_meta_security"
                        case authCode = "auth_code"
                        case codeVerifier = "code_verifier"
                        case message
                        case signature
                        case chain
                    }
                }
                /// - Remark: Generated from `#/paths/token/POST/requestBody/content/application\/json`.
                case json(Operations.PostToken.Input.Body.JsonPayload)
            }
            public var body: Operations.PostToken.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.PostToken.Input.Query,
                headers: Operations.PostToken.Input.Headers = .init(),
                body: Operations.PostToken.Input.Body? = nil
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/token/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/token/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccessTokenResponseSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccessTokenResponseSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostToken.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// An access and refresh token have been successfully issued.
            ///
            ///
            /// - Remark: Generated from `#/paths//token/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//token/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//token/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//token/post/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Internal Server Error.
            ///
            ///
            /// - Remark: Generated from `#/paths//token/post/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//token/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Logs out a user.
    ///
    /// - Remark: HTTP `POST /logout`.
    /// - Remark: Generated from `#/paths//logout/post`.
    public enum PostLogout {
        public static let id: Swift.String = "post/logout"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/logout/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/logout/POST/query/scope`.
                @frozen public enum ScopePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case global = "global"
                    case local = "local"
                    case others = "others"
                }
                /// (Optional.) Determines how the user should be logged out. When `global` is used, the user is logged out from all active sessions. When `local` is used, the user is logged out from the current session. When `others` is used, the user is logged out from all other sessions except the current one. Clients should remove stored access and refresh tokens except when `others` is used.
                ///
                ///
                /// - Remark: Generated from `#/paths/logout/POST/query/scope`.
                public var scope: Operations.PostLogout.Input.Query.ScopePayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - scope: (Optional.) Determines how the user should be logged out. When `global` is used, the user is logged out from all active sessions. When `local` is used, the user is logged out from the current session. When `others` is used, the user is logged out from all other sessions except the current one. Clients should remove stored access and refresh tokens except when `others` is used.
                public init(scope: Operations.PostLogout.Input.Query.ScopePayload? = nil) {
                    self.scope = scope
                }
            }
            public var query: Operations.PostLogout.Input.Query
            /// - Remark: Generated from `#/paths/logout/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostLogout.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostLogout.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostLogout.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.PostLogout.Input.Query = .init(),
                headers: Operations.PostLogout.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// No content returned on successful logout.
            ///
            /// - Remark: Generated from `#/paths//logout/post/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.PostLogout.Output.NoContent)
            /// No content returned on successful logout.
            ///
            /// - Remark: Generated from `#/paths//logout/post/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.PostLogout.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//logout/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Authenticate by verifying the possession of a one-time token. Usually for use as clickable links.
    ///
    /// - Remark: HTTP `GET /verify`.
    /// - Remark: Generated from `#/paths//verify/get`.
    public enum GetVerify {
        public static let id: Swift.String = "get/verify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/verify/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/verify/GET/query/token`.
                public var token: Swift.String
                /// - Remark: Generated from `#/paths/verify/GET/query/type`.
                @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case signup = "signup"
                    case invite = "invite"
                    case recovery = "recovery"
                    case magiclink = "magiclink"
                    case emailChange = "email_change"
                }
                /// - Remark: Generated from `#/paths/verify/GET/query/type`.
                public var _type: Operations.GetVerify.Input.Query._TypePayload
                /// (Optional) URL to redirect back into the app on after verification completes successfully. If not specified will use the "Site URL" configuration option. If not allowed per the allow list it will use the "Site URL" configuration option.
                ///
                ///
                /// - Remark: Generated from `#/paths/verify/GET/query/redirect_to`.
                public var redirectTo: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - token:
                ///   - _type:
                ///   - redirectTo: (Optional) URL to redirect back into the app on after verification completes successfully. If not specified will use the "Site URL" configuration option. If not allowed per the allow list it will use the "Site URL" configuration option.
                public init(
                    token: Swift.String,
                    _type: Operations.GetVerify.Input.Query._TypePayload,
                    redirectTo: Swift.String? = nil
                ) {
                    self.token = token
                    self._type = _type
                    self.redirectTo = redirectTo
                }
            }
            public var query: Operations.GetVerify.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.GetVerify.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// HTTP See Other redirect response where `Location` is a specially formatted URL that includes an `access_token`, `refresh_token`, `expires_in` as URL query encoded values in the URL fragment (anything after `#`). These values are encoded in the fragment as this value is only visible to the browser handling the redirect and is not sent to the server.
            ///
            ///
            /// - Remark: Generated from `#/paths//verify/get/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Components.Responses.AccessRefreshTokenRedirectResponse)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Components.Responses.AccessRefreshTokenRedirectResponse {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Authenticate by verifying the possession of a one-time token.
    ///
    /// - Remark: HTTP `POST /verify`.
    /// - Remark: Generated from `#/paths//verify/post`.
    public enum PostVerify {
        public static let id: Swift.String = "post/verify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/verify/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostVerify.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostVerify.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostVerify.Input.Headers
            /// - Remark: Generated from `#/paths/verify/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/verify/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/verify/POST/requestBody/json/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case signup = "signup"
                        case recovery = "recovery"
                        case invite = "invite"
                        case magiclink = "magiclink"
                        case emailChange = "email_change"
                        case sms = "sms"
                        case phoneChange = "phone_change"
                    }
                    /// - Remark: Generated from `#/paths/verify/POST/requestBody/json/type`.
                    public var _type: Operations.PostVerify.Input.Body.JsonPayload._TypePayload?
                    /// - Remark: Generated from `#/paths/verify/POST/requestBody/json/token`.
                    public var token: Swift.String?
                    /// The hashed value of token. Applicable only if used with `type` and nothing else.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/verify/POST/requestBody/json/token_hash`.
                    public var tokenHash: Swift.String?
                    /// Applicable only if `type` is with regards to an email address.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/verify/POST/requestBody/json/email`.
                    public var email: Swift.String?
                    /// Applicable only if `type` is with regards to an phone number.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/verify/POST/requestBody/json/phone`.
                    public var phone: Swift.String?
                    /// (Optional) URL to redirect back into the app on after verification completes successfully. If not specified will use the "Site URL" configuration option. If not allowed per the allow list it will use the "Site URL" configuration option.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/verify/POST/requestBody/json/redirect_to`.
                    public var redirectTo: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - _type:
                    ///   - token:
                    ///   - tokenHash: The hashed value of token. Applicable only if used with `type` and nothing else.
                    ///   - email: Applicable only if `type` is with regards to an email address.
                    ///   - phone: Applicable only if `type` is with regards to an phone number.
                    ///   - redirectTo: (Optional) URL to redirect back into the app on after verification completes successfully. If not specified will use the "Site URL" configuration option. If not allowed per the allow list it will use the "Site URL" configuration option.
                    public init(
                        _type: Operations.PostVerify.Input.Body.JsonPayload._TypePayload? = nil,
                        token: Swift.String? = nil,
                        tokenHash: Swift.String? = nil,
                        email: Swift.String? = nil,
                        phone: Swift.String? = nil,
                        redirectTo: Swift.String? = nil
                    ) {
                        self._type = _type
                        self.token = token
                        self.tokenHash = tokenHash
                        self.email = email
                        self.phone = phone
                        self.redirectTo = redirectTo
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case token
                        case tokenHash = "token_hash"
                        case email
                        case phone
                        case redirectTo = "redirect_to"
                    }
                }
                /// - Remark: Generated from `#/paths/verify/POST/requestBody/content/application\/json`.
                case json(Operations.PostVerify.Input.Body.JsonPayload)
            }
            public var body: Operations.PostVerify.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostVerify.Input.Headers = .init(),
                body: Operations.PostVerify.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/verify/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/verify/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccessTokenResponseSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccessTokenResponseSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostVerify.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostVerify.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// An access and refresh token.
            ///
            /// - Remark: Generated from `#/paths//verify/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostVerify.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostVerify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//verify/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Redirects to an external OAuth provider. Usually for use as clickable links.
    ///
    /// - Remark: HTTP `GET /authorize`.
    /// - Remark: Generated from `#/paths//authorize/get`.
    public enum GetAuthorize {
        public static let id: Swift.String = "get/authorize"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/authorize/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Name of the OAuth provider.
                ///
                /// - Remark: Generated from `#/paths/authorize/GET/query/provider`.
                public var provider: Swift.String
                /// Space separated list of OAuth scopes to pass on to `provider`.
                ///
                /// - Remark: Generated from `#/paths/authorize/GET/query/scopes`.
                public var scopes: Swift.String
                /// (Optional) A token representing a previous invitation of the user. A successful sign-in with OAuth will mark the invitation as completed.
                ///
                /// - Remark: Generated from `#/paths/authorize/GET/query/invite_token`.
                public var inviteToken: Swift.String?
                /// (Optional) URL to redirect back into the app on after OAuth sign-in completes successfully or not. If not specified will use the "Site URL" configuration option. If not allowed per the allow list it will use the "Site URL" configuration option.
                ///
                ///
                /// - Remark: Generated from `#/paths/authorize/GET/query/redirect_to`.
                public var redirectTo: Swift.String?
                /// - Remark: Generated from `#/paths/authorize/GET/query/code_challenge_method`.
                @frozen public enum CodeChallengeMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case plain = "plain"
                    case s256 = "s256"
                }
                /// (Optional) Method used to encrypt the verifier. Can be `plain` (no transformation) or `s256` (where SHA-256 is used). It is always recommended that `s256` is used.
                ///
                /// - Remark: Generated from `#/paths/authorize/GET/query/code_challenge_method`.
                public var codeChallengeMethod: Operations.GetAuthorize.Input.Query.CodeChallengeMethodPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - provider: Name of the OAuth provider.
                ///   - scopes: Space separated list of OAuth scopes to pass on to `provider`.
                ///   - inviteToken: (Optional) A token representing a previous invitation of the user. A successful sign-in with OAuth will mark the invitation as completed.
                ///   - redirectTo: (Optional) URL to redirect back into the app on after OAuth sign-in completes successfully or not. If not specified will use the "Site URL" configuration option. If not allowed per the allow list it will use the "Site URL" configuration option.
                ///   - codeChallengeMethod: (Optional) Method used to encrypt the verifier. Can be `plain` (no transformation) or `s256` (where SHA-256 is used). It is always recommended that `s256` is used.
                public init(
                    provider: Swift.String,
                    scopes: Swift.String,
                    inviteToken: Swift.String? = nil,
                    redirectTo: Swift.String? = nil,
                    codeChallengeMethod: Operations.GetAuthorize.Input.Query.CodeChallengeMethodPayload? = nil
                ) {
                    self.provider = provider
                    self.scopes = scopes
                    self.inviteToken = inviteToken
                    self.redirectTo = redirectTo
                    self.codeChallengeMethod = codeChallengeMethod
                }
            }
            public var query: Operations.GetAuthorize.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.GetAuthorize.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// HTTP Redirect to the OAuth identity provider's authorization URL.
            ///
            ///
            /// - Remark: Generated from `#/paths//authorize/get/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Components.Responses.OAuthAuthorizeRedirectResponse)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Components.Responses.OAuthAuthorizeRedirectResponse {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Signs a user up.
    ///
    /// Creates a new user.
    ///
    ///
    /// - Remark: HTTP `POST /signup`.
    /// - Remark: Generated from `#/paths//signup/post`.
    public enum PostSignup {
        public static let id: Swift.String = "post/signup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/signup/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSignup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSignup.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSignup.Input.Headers
            /// - Remark: Generated from `#/paths/signup/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/signup/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/signup/POST/requestBody/json/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/paths/signup/POST/requestBody/json/phone`.
                    public var phone: Swift.String?
                    /// - Remark: Generated from `#/paths/signup/POST/requestBody/json/channel`.
                    @frozen public enum ChannelPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case sms = "sms"
                        case whatsapp = "whatsapp"
                    }
                    /// - Remark: Generated from `#/paths/signup/POST/requestBody/json/channel`.
                    public var channel: Operations.PostSignup.Input.Body.JsonPayload.ChannelPayload?
                    /// - Remark: Generated from `#/paths/signup/POST/requestBody/json/password`.
                    public var password: Swift.String?
                    /// - Remark: Generated from `#/paths/signup/POST/requestBody/json/data`.
                    public var data: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/paths/signup/POST/requestBody/json/code_challenge`.
                    public var codeChallenge: Swift.String?
                    /// - Remark: Generated from `#/paths/signup/POST/requestBody/json/code_challenge_method`.
                    @frozen public enum CodeChallengeMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case plain = "plain"
                        case s256 = "s256"
                    }
                    /// - Remark: Generated from `#/paths/signup/POST/requestBody/json/code_challenge_method`.
                    public var codeChallengeMethod: Operations.PostSignup.Input.Body.JsonPayload.CodeChallengeMethodPayload?
                    /// - Remark: Generated from `#/paths/signup/POST/requestBody/json/gotrue_meta_security`.
                    public var gotrueMetaSecurity: Components.Schemas.GoTrueSecurity?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email:
                    ///   - phone:
                    ///   - channel:
                    ///   - password:
                    ///   - data:
                    ///   - codeChallenge:
                    ///   - codeChallengeMethod:
                    ///   - gotrueMetaSecurity:
                    public init(
                        email: Swift.String? = nil,
                        phone: Swift.String? = nil,
                        channel: Operations.PostSignup.Input.Body.JsonPayload.ChannelPayload? = nil,
                        password: Swift.String? = nil,
                        data: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        codeChallenge: Swift.String? = nil,
                        codeChallengeMethod: Operations.PostSignup.Input.Body.JsonPayload.CodeChallengeMethodPayload? = nil,
                        gotrueMetaSecurity: Components.Schemas.GoTrueSecurity? = nil
                    ) {
                        self.email = email
                        self.phone = phone
                        self.channel = channel
                        self.password = password
                        self.data = data
                        self.codeChallenge = codeChallenge
                        self.codeChallengeMethod = codeChallengeMethod
                        self.gotrueMetaSecurity = gotrueMetaSecurity
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case phone
                        case channel
                        case password
                        case data
                        case codeChallenge = "code_challenge"
                        case codeChallengeMethod = "code_challenge_method"
                        case gotrueMetaSecurity = "gotrue_meta_security"
                    }
                }
                /// - Remark: Generated from `#/paths/signup/POST/requestBody/content/application\/json`.
                case json(Operations.PostSignup.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSignup.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSignup.Input.Headers = .init(),
                body: Operations.PostSignup.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/signup/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/signup/POST/responses/200/content/json`.
                    @frozen public enum JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/signup/POST/responses/200/content/json/case1`.
                        case AccessTokenResponseSchema(Components.Schemas.AccessTokenResponseSchema)
                        /// - Remark: Generated from `#/paths/signup/POST/responses/200/content/json/case2`.
                        case UserSchema(Components.Schemas.UserSchema)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .AccessTokenResponseSchema(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .UserSchema(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .AccessTokenResponseSchema(value):
                                try value.encode(to: encoder)
                            case let .UserSchema(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/signup/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSignup.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSignup.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSignup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSignup.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A user already exists and is not confirmed (in which case a user object is returned). A user did not exist and is signed up. If email or phone confirmation is enabled, returns a user object. If confirmation is disabled, returns an access token and refresh token response.
            ///
            ///
            /// - Remark: Generated from `#/paths//signup/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSignup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSignup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//signup/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//signup/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Request password recovery.
    ///
    /// Users that have forgotten their password can have it reset with this API.
    ///
    ///
    /// - Remark: HTTP `POST /recover`.
    /// - Remark: Generated from `#/paths//recover/post`.
    public enum PostRecover {
        public static let id: Swift.String = "post/recover"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/recover/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostRecover.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostRecover.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostRecover.Input.Headers
            /// - Remark: Generated from `#/paths/recover/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/recover/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/recover/POST/requestBody/json/email`.
                    public var email: Swift.String
                    /// - Remark: Generated from `#/paths/recover/POST/requestBody/json/code_challenge`.
                    public var codeChallenge: Swift.String?
                    /// - Remark: Generated from `#/paths/recover/POST/requestBody/json/code_challenge_method`.
                    @frozen public enum CodeChallengeMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case plain = "plain"
                        case s256 = "s256"
                    }
                    /// - Remark: Generated from `#/paths/recover/POST/requestBody/json/code_challenge_method`.
                    public var codeChallengeMethod: Operations.PostRecover.Input.Body.JsonPayload.CodeChallengeMethodPayload?
                    /// - Remark: Generated from `#/paths/recover/POST/requestBody/json/gotrue_meta_security`.
                    public var gotrueMetaSecurity: Components.Schemas.GoTrueSecurity?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email:
                    ///   - codeChallenge:
                    ///   - codeChallengeMethod:
                    ///   - gotrueMetaSecurity:
                    public init(
                        email: Swift.String,
                        codeChallenge: Swift.String? = nil,
                        codeChallengeMethod: Operations.PostRecover.Input.Body.JsonPayload.CodeChallengeMethodPayload? = nil,
                        gotrueMetaSecurity: Components.Schemas.GoTrueSecurity? = nil
                    ) {
                        self.email = email
                        self.codeChallenge = codeChallenge
                        self.codeChallengeMethod = codeChallengeMethod
                        self.gotrueMetaSecurity = gotrueMetaSecurity
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case codeChallenge = "code_challenge"
                        case codeChallengeMethod = "code_challenge_method"
                        case gotrueMetaSecurity = "gotrue_meta_security"
                    }
                }
                /// - Remark: Generated from `#/paths/recover/POST/requestBody/content/application\/json`.
                case json(Operations.PostRecover.Input.Body.JsonPayload)
            }
            public var body: Operations.PostRecover.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostRecover.Input.Headers = .init(),
                body: Operations.PostRecover.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/recover/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/recover/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostRecover.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostRecover.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A recovery email has been sent to the address. An empty JSON object is returned. To obfuscate whether such an email address already exists in the system this response is sent regardless whether the address exists or not.
            ///
            /// - Remark: Generated from `#/paths//recover/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostRecover.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostRecover.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//recover/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/recover/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/recover/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostRecover.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostRecover.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Returned when unable to validate the email address.
            ///
            /// - Remark: Generated from `#/paths//recover/post/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.PostRecover.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.PostRecover.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//recover/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Resends a one-time password (OTP) through email or SMS.
    ///
    /// Allows a user to resend an existing signup, sms, email_change or phone_change OTP.
    ///
    ///
    /// - Remark: HTTP `POST /resend`.
    /// - Remark: Generated from `#/paths//resend/post`.
    public enum PostResend {
        public static let id: Swift.String = "post/resend"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/resend/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostResend.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostResend.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostResend.Input.Headers
            /// - Remark: Generated from `#/paths/resend/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/resend/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Applicable only if `type` is with regards to an email address.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/resend/POST/requestBody/json/email`.
                    public var email: Swift.String?
                    /// Applicable only if `type` is with regards to an phone number.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/resend/POST/requestBody/json/phone`.
                    public var phone: Swift.String?
                    /// - Remark: Generated from `#/paths/resend/POST/requestBody/json/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case signup = "signup"
                        case emailChange = "email_change"
                        case sms = "sms"
                        case phoneChange = "phone_change"
                    }
                    /// - Remark: Generated from `#/paths/resend/POST/requestBody/json/type`.
                    public var _type: Operations.PostResend.Input.Body.JsonPayload._TypePayload?
                    /// - Remark: Generated from `#/paths/resend/POST/requestBody/json/gotrue_meta_security`.
                    public var gotrueMetaSecurity: Components.Schemas.GoTrueSecurity?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email: Applicable only if `type` is with regards to an email address.
                    ///   - phone: Applicable only if `type` is with regards to an phone number.
                    ///   - _type:
                    ///   - gotrueMetaSecurity:
                    public init(
                        email: Swift.String? = nil,
                        phone: Swift.String? = nil,
                        _type: Operations.PostResend.Input.Body.JsonPayload._TypePayload? = nil,
                        gotrueMetaSecurity: Components.Schemas.GoTrueSecurity? = nil
                    ) {
                        self.email = email
                        self.phone = phone
                        self._type = _type
                        self.gotrueMetaSecurity = gotrueMetaSecurity
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case phone
                        case _type = "type"
                        case gotrueMetaSecurity = "gotrue_meta_security"
                    }
                }
                /// - Remark: Generated from `#/paths/resend/POST/requestBody/content/application\/json`.
                case json(Operations.PostResend.Input.Body.JsonPayload)
            }
            public var body: Operations.PostResend.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostResend.Input.Headers = .init(),
                body: Operations.PostResend.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/resend/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/resend/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// Unique ID of the message as reported by the SMS sending provider. Useful for tracking deliverability problems.
                        ///
                        /// - Remark: Generated from `#/paths/resend/POST/responses/200/content/json/message_id`.
                        public var messageId: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - messageId: Unique ID of the message as reported by the SMS sending provider. Useful for tracking deliverability problems.
                        public init(messageId: Swift.String? = nil) {
                            self.messageId = messageId
                        }
                        public enum CodingKeys: String, CodingKey {
                            case messageId = "message_id"
                        }
                    }
                    /// - Remark: Generated from `#/paths/resend/POST/responses/200/content/application\/json`.
                    case json(Operations.PostResend.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostResend.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostResend.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostResend.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A One-Time Password was sent to the email or phone. To obfuscate whether such an address or number already exists in the system this response is sent in both cases.
            ///
            /// - Remark: Generated from `#/paths//resend/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostResend.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostResend.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//resend/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/resend/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/resend/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostResend.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostResend.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Returned when unable to validate the email address or phone number.
            ///
            /// - Remark: Generated from `#/paths//resend/post/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.PostResend.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.PostResend.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//resend/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Authenticate a user by sending them a magic link.
    ///
    /// A magic link is a special type of URL that includes a One-Time Password. When a user visits this link in a browser they are immediately authenticated.
    ///
    ///
    /// - Remark: HTTP `POST /magiclink`.
    /// - Remark: Generated from `#/paths//magiclink/post`.
    public enum PostMagiclink {
        public static let id: Swift.String = "post/magiclink"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/magiclink/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostMagiclink.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostMagiclink.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostMagiclink.Input.Headers
            /// - Remark: Generated from `#/paths/magiclink/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/magiclink/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/magiclink/POST/requestBody/json/email`.
                    public var email: Swift.String
                    /// - Remark: Generated from `#/paths/magiclink/POST/requestBody/json/data`.
                    public var data: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/paths/magiclink/POST/requestBody/json/gotrue_meta_security`.
                    public var gotrueMetaSecurity: Components.Schemas.GoTrueSecurity?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email:
                    ///   - data:
                    ///   - gotrueMetaSecurity:
                    public init(
                        email: Swift.String,
                        data: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        gotrueMetaSecurity: Components.Schemas.GoTrueSecurity? = nil
                    ) {
                        self.email = email
                        self.data = data
                        self.gotrueMetaSecurity = gotrueMetaSecurity
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case data
                        case gotrueMetaSecurity = "gotrue_meta_security"
                    }
                }
                /// - Remark: Generated from `#/paths/magiclink/POST/requestBody/content/application\/json`.
                case json(Operations.PostMagiclink.Input.Body.JsonPayload)
            }
            public var body: Operations.PostMagiclink.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostMagiclink.Input.Headers = .init(),
                body: Operations.PostMagiclink.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/magiclink/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/magiclink/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostMagiclink.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostMagiclink.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A recovery email has been sent to the address. An empty JSON object is returned. To obfuscate whether such an email address already exists in the system this response is sent regardless whether the address exists or not.
            ///
            /// - Remark: Generated from `#/paths//magiclink/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostMagiclink.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostMagiclink.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//magiclink/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/magiclink/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/magiclink/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostMagiclink.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostMagiclink.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Returned when unable to validate the email address.
            ///
            /// - Remark: Generated from `#/paths//magiclink/post/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.PostMagiclink.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.PostMagiclink.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//magiclink/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Authenticate a user by sending them a One-Time Password over email or SMS.
    ///
    /// - Remark: HTTP `POST /otp`.
    /// - Remark: Generated from `#/paths//otp/post`.
    public enum PostOtp {
        public static let id: Swift.String = "post/otp"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/otp/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOtp.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOtp.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostOtp.Input.Headers
            /// - Remark: Generated from `#/paths/otp/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/otp/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/otp/POST/requestBody/json/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/paths/otp/POST/requestBody/json/phone`.
                    public var phone: Swift.String?
                    /// - Remark: Generated from `#/paths/otp/POST/requestBody/json/channel`.
                    @frozen public enum ChannelPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case sms = "sms"
                        case whatsapp = "whatsapp"
                    }
                    /// - Remark: Generated from `#/paths/otp/POST/requestBody/json/channel`.
                    public var channel: Operations.PostOtp.Input.Body.JsonPayload.ChannelPayload?
                    /// - Remark: Generated from `#/paths/otp/POST/requestBody/json/create_user`.
                    public var createUser: Swift.Bool?
                    /// - Remark: Generated from `#/paths/otp/POST/requestBody/json/data`.
                    public var data: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/paths/otp/POST/requestBody/json/code_challenge_method`.
                    @frozen public enum CodeChallengeMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case s256 = "s256"
                        case plain = "plain"
                    }
                    /// - Remark: Generated from `#/paths/otp/POST/requestBody/json/code_challenge_method`.
                    public var codeChallengeMethod: Operations.PostOtp.Input.Body.JsonPayload.CodeChallengeMethodPayload?
                    /// - Remark: Generated from `#/paths/otp/POST/requestBody/json/code_challenge`.
                    public var codeChallenge: Swift.String?
                    /// - Remark: Generated from `#/paths/otp/POST/requestBody/json/gotrue_meta_security`.
                    public var gotrueMetaSecurity: Components.Schemas.GoTrueSecurity?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email:
                    ///   - phone:
                    ///   - channel:
                    ///   - createUser:
                    ///   - data:
                    ///   - codeChallengeMethod:
                    ///   - codeChallenge:
                    ///   - gotrueMetaSecurity:
                    public init(
                        email: Swift.String? = nil,
                        phone: Swift.String? = nil,
                        channel: Operations.PostOtp.Input.Body.JsonPayload.ChannelPayload? = nil,
                        createUser: Swift.Bool? = nil,
                        data: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        codeChallengeMethod: Operations.PostOtp.Input.Body.JsonPayload.CodeChallengeMethodPayload? = nil,
                        codeChallenge: Swift.String? = nil,
                        gotrueMetaSecurity: Components.Schemas.GoTrueSecurity? = nil
                    ) {
                        self.email = email
                        self.phone = phone
                        self.channel = channel
                        self.createUser = createUser
                        self.data = data
                        self.codeChallengeMethod = codeChallengeMethod
                        self.codeChallenge = codeChallenge
                        self.gotrueMetaSecurity = gotrueMetaSecurity
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case phone
                        case channel
                        case createUser = "create_user"
                        case data
                        case codeChallengeMethod = "code_challenge_method"
                        case codeChallenge = "code_challenge"
                        case gotrueMetaSecurity = "gotrue_meta_security"
                    }
                }
                /// - Remark: Generated from `#/paths/otp/POST/requestBody/content/application\/json`.
                case json(Operations.PostOtp.Input.Body.JsonPayload)
            }
            public var body: Operations.PostOtp.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostOtp.Input.Headers = .init(),
                body: Operations.PostOtp.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/otp/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/otp/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// Unique ID of the message as reported by the SMS sending provider. Useful for tracking deliverability problems.
                        ///
                        /// - Remark: Generated from `#/paths/otp/POST/responses/200/content/json/message_id`.
                        public var messageId: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - messageId: Unique ID of the message as reported by the SMS sending provider. Useful for tracking deliverability problems.
                        public init(messageId: Swift.String? = nil) {
                            self.messageId = messageId
                        }
                        public enum CodingKeys: String, CodingKey {
                            case messageId = "message_id"
                        }
                    }
                    /// - Remark: Generated from `#/paths/otp/POST/responses/200/content/application\/json`.
                    case json(Operations.PostOtp.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostOtp.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostOtp.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostOtp.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A One-Time Password was sent to the email or phone. To obfuscate whether such an address or number already exists in the system this response is sent in both cases.
            ///
            /// - Remark: Generated from `#/paths//otp/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostOtp.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostOtp.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//otp/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/otp/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/otp/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostOtp.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostOtp.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Returned when unable to validate the email or phone number.
            ///
            /// - Remark: Generated from `#/paths//otp/post/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.PostOtp.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.PostOtp.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//otp/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch the latest user account information.
    ///
    /// - Remark: HTTP `GET /user`.
    /// - Remark: Generated from `#/paths//user/get`.
    public enum GetUser {
        public static let id: Swift.String = "get/user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetUser.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.GetUser.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User's account information.
            ///
            /// - Remark: Generated from `#/paths//user/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update certain properties of the current user account.
    ///
    /// - Remark: HTTP `PUT /user`.
    /// - Remark: Generated from `#/paths//user/put`.
    public enum PutUser {
        public static let id: Swift.String = "put/user"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutUser.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutUser.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PutUser.Input.Headers
            /// - Remark: Generated from `#/paths/user/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/PUT/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/user/PUT/requestBody/json/email`.
                    public var email: Swift.String?
                    /// - Remark: Generated from `#/paths/user/PUT/requestBody/json/phone`.
                    public var phone: Swift.String?
                    /// - Remark: Generated from `#/paths/user/PUT/requestBody/json/password`.
                    public var password: Swift.String?
                    /// - Remark: Generated from `#/paths/user/PUT/requestBody/json/nonce`.
                    public var nonce: Swift.String?
                    /// - Remark: Generated from `#/paths/user/PUT/requestBody/json/data`.
                    public var data: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/paths/user/PUT/requestBody/json/app_metadata`.
                    public var appMetadata: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/paths/user/PUT/requestBody/json/channel`.
                    @frozen public enum ChannelPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case sms = "sms"
                        case whatsapp = "whatsapp"
                    }
                    /// - Remark: Generated from `#/paths/user/PUT/requestBody/json/channel`.
                    public var channel: Operations.PutUser.Input.Body.JsonPayload.ChannelPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email:
                    ///   - phone:
                    ///   - password:
                    ///   - nonce:
                    ///   - data:
                    ///   - appMetadata:
                    ///   - channel:
                    public init(
                        email: Swift.String? = nil,
                        phone: Swift.String? = nil,
                        password: Swift.String? = nil,
                        nonce: Swift.String? = nil,
                        data: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        appMetadata: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        channel: Operations.PutUser.Input.Body.JsonPayload.ChannelPayload? = nil
                    ) {
                        self.email = email
                        self.phone = phone
                        self.password = password
                        self.nonce = nonce
                        self.data = data
                        self.appMetadata = appMetadata
                        self.channel = channel
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case phone
                        case password
                        case nonce
                        case data
                        case appMetadata = "app_metadata"
                        case channel
                    }
                }
                /// - Remark: Generated from `#/paths/user/PUT/requestBody/content/application\/json`.
                case json(Operations.PutUser.Input.Body.JsonPayload)
            }
            public var body: Operations.PutUser.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PutUser.Input.Headers = .init(),
                body: Operations.PutUser.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutUser.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PutUser.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User's updated account information.
            ///
            /// - Remark: Generated from `#/paths//user/put/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PutUser.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PutUser.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//user/put/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//user/put/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Links an OAuth identity to an existing user. Redirects to an external OAuth provider.
    ///
    /// - Remark: HTTP `GET /user/identities/authorize`.
    /// - Remark: Generated from `#/paths//user/identities/authorize/get`.
    public enum GetUserIdentitiesAuthorize {
        public static let id: Swift.String = "get/user/identities/authorize"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/identities/authorize/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Name of the OAuth provider.
                ///
                /// - Remark: Generated from `#/paths/user/identities/authorize/GET/query/provider`.
                public var provider: Swift.String
                /// Space separated list of OAuth scopes to pass on to `provider`.
                ///
                /// - Remark: Generated from `#/paths/user/identities/authorize/GET/query/scopes`.
                public var scopes: Swift.String
                /// (Optional) URL to redirect back into the app on after OAuth sign-in completes successfully or not. If not specified will use the "Site URL" configuration option. If not allowed per the allow list it will use the "Site URL" configuration option.
                ///
                ///
                /// - Remark: Generated from `#/paths/user/identities/authorize/GET/query/redirect_to`.
                public var redirectTo: Swift.String?
                /// - Remark: Generated from `#/paths/user/identities/authorize/GET/query/code_challenge_method`.
                @frozen public enum CodeChallengeMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case plain = "plain"
                    case s256 = "s256"
                }
                /// (Optional) Method used to encrypt the verifier. Can be `plain` (no transformation) or `s256` (where SHA-256 is used). It is always recommended that `s256` is used.
                ///
                /// - Remark: Generated from `#/paths/user/identities/authorize/GET/query/code_challenge_method`.
                public var codeChallengeMethod: Operations.GetUserIdentitiesAuthorize.Input.Query.CodeChallengeMethodPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - provider: Name of the OAuth provider.
                ///   - scopes: Space separated list of OAuth scopes to pass on to `provider`.
                ///   - redirectTo: (Optional) URL to redirect back into the app on after OAuth sign-in completes successfully or not. If not specified will use the "Site URL" configuration option. If not allowed per the allow list it will use the "Site URL" configuration option.
                ///   - codeChallengeMethod: (Optional) Method used to encrypt the verifier. Can be `plain` (no transformation) or `s256` (where SHA-256 is used). It is always recommended that `s256` is used.
                public init(
                    provider: Swift.String,
                    scopes: Swift.String,
                    redirectTo: Swift.String? = nil,
                    codeChallengeMethod: Operations.GetUserIdentitiesAuthorize.Input.Query.CodeChallengeMethodPayload? = nil
                ) {
                    self.provider = provider
                    self.scopes = scopes
                    self.redirectTo = redirectTo
                    self.codeChallengeMethod = codeChallengeMethod
                }
            }
            public var query: Operations.GetUserIdentitiesAuthorize.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.GetUserIdentitiesAuthorize.Input.Query) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// HTTP Redirect to the OAuth identity provider's authorization URL.
            ///
            ///
            /// - Remark: Generated from `#/paths//user/identities/authorize/get/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Components.Responses.OAuthAuthorizeRedirectResponse)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Components.Responses.OAuthAuthorizeRedirectResponse {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Unlinks an identity from the current user.
    ///
    /// - Remark: HTTP `DELETE /user/identities/{identityId}`.
    /// - Remark: Generated from `#/paths//user/identities/{identityId}/delete`.
    public enum DeleteUserIdentitiesIdentityId {
        public static let id: Swift.String = "delete/user/identities/{identityId}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/path/identityId`.
                public var identityId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - identityId:
                public init(identityId: Swift.String) {
                    self.identityId = identityId
                }
            }
            public var path: Operations.DeleteUserIdentitiesIdentityId.Input.Path
            /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteUserIdentitiesIdentityId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteUserIdentitiesIdentityId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteUserIdentitiesIdentityId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteUserIdentitiesIdentityId.Input.Path,
                headers: Operations.DeleteUserIdentitiesIdentityId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUserIdentitiesIdentityId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteUserIdentitiesIdentityId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User's account data.
            ///
            /// - Remark: Generated from `#/paths//user/identities/{identityId}/delete/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteUserIdentitiesIdentityId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteUserIdentitiesIdentityId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/responses/401/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUserIdentitiesIdentityId.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteUserIdentitiesIdentityId.Output.Unauthorized.Body) {
                    self.body = body
                }
            }
            /// The user is not authenticated.
            ///
            /// - Remark: Generated from `#/paths//user/identities/{identityId}/delete/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DeleteUserIdentitiesIdentityId.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.DeleteUserIdentitiesIdentityId.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/responses/403/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: OpenAPIRuntime.OpenAPIValueContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUserIdentitiesIdentityId.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteUserIdentitiesIdentityId.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden error
            ///
            /// - Remark: Generated from `#/paths//user/identities/{identityId}/delete/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.DeleteUserIdentitiesIdentityId.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.DeleteUserIdentitiesIdentityId.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUserIdentitiesIdentityId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteUserIdentitiesIdentityId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not found error
            ///
            /// - Remark: Generated from `#/paths//user/identities/{identityId}/delete/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DeleteUserIdentitiesIdentityId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DeleteUserIdentitiesIdentityId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/identities/{identityId}/DELETE/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUserIdentitiesIdentityId.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteUserIdentitiesIdentityId.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Unprocessable entity
            ///
            /// - Remark: Generated from `#/paths//user/identities/{identityId}/delete/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.DeleteUserIdentitiesIdentityId.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.DeleteUserIdentitiesIdentityId.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Reauthenticates the possession of an email or phone number for the purpose of password change.
    ///
    /// For a password to be changed on a user account, the user's email or phone number needs to be confirmed before they are allowed to set a new password. This requirement is configurable. This API sends a confirmation email or SMS message. A nonce in this message can be provided in `PUT /user` to change the password on the account.
    ///
    ///
    /// - Remark: HTTP `POST /reauthenticate`.
    /// - Remark: Generated from `#/paths//reauthenticate/post`.
    public enum PostReauthenticate {
        public static let id: Swift.String = "post/reauthenticate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/reauthenticate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostReauthenticate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostReauthenticate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostReauthenticate.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.PostReauthenticate.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/reauthenticate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/reauthenticate/POST/responses/200/content/application\/json`.
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: OpenAPIRuntime.OpenAPIObjectContainer {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostReauthenticate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostReauthenticate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A One-Time Password was sent to the user's email or phone.
            ///
            /// - Remark: Generated from `#/paths//reauthenticate/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostReauthenticate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostReauthenticate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//reauthenticate/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//reauthenticate/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Begin enrolling a new factor for MFA.
    ///
    /// - Remark: HTTP `POST /factors`.
    /// - Remark: Generated from `#/paths//factors/post`.
    public enum PostFactors {
        public static let id: Swift.String = "post/factors"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/factors/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostFactors.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostFactors.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostFactors.Input.Headers
            /// - Remark: Generated from `#/paths/factors/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/factors/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/factors/POST/requestBody/json/factor_type`.
                    @frozen public enum FactorTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case totp = "totp"
                        case phone = "phone"
                        case webauthn = "webauthn"
                    }
                    /// - Remark: Generated from `#/paths/factors/POST/requestBody/json/factor_type`.
                    public var factorType: Operations.PostFactors.Input.Body.JsonPayload.FactorTypePayload
                    /// - Remark: Generated from `#/paths/factors/POST/requestBody/json/friendly_name`.
                    public var friendlyName: Swift.String?
                    /// - Remark: Generated from `#/paths/factors/POST/requestBody/json/issuer`.
                    public var issuer: Swift.String?
                    /// - Remark: Generated from `#/paths/factors/POST/requestBody/json/phone`.
                    public var phone: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - factorType:
                    ///   - friendlyName:
                    ///   - issuer:
                    ///   - phone:
                    public init(
                        factorType: Operations.PostFactors.Input.Body.JsonPayload.FactorTypePayload,
                        friendlyName: Swift.String? = nil,
                        issuer: Swift.String? = nil,
                        phone: Swift.String? = nil
                    ) {
                        self.factorType = factorType
                        self.friendlyName = friendlyName
                        self.issuer = issuer
                        self.phone = phone
                    }
                    public enum CodingKeys: String, CodingKey {
                        case factorType = "factor_type"
                        case friendlyName = "friendly_name"
                        case issuer
                        case phone
                    }
                }
                /// - Remark: Generated from `#/paths/factors/POST/requestBody/content/application\/json`.
                case json(Operations.PostFactors.Input.Body.JsonPayload)
            }
            public var body: Operations.PostFactors.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostFactors.Input.Headers = .init(),
                body: Operations.PostFactors.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/factors/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/json/id`.
                        public var id: Swift.String?
                        /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/json/type`.
                        @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case totp = "totp"
                            case phone = "phone"
                            case webauthn = "webauthn"
                        }
                        /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/json/type`.
                        public var _type: Operations.PostFactors.Output.Ok.Body.JsonPayload._TypePayload?
                        /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/json/totp`.
                        public struct TotpPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/json/totp/qr_code`.
                            public var qrCode: Swift.String?
                            /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/json/totp/secret`.
                            public var secret: Swift.String?
                            /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/json/totp/uri`.
                            public var uri: Swift.String?
                            /// Creates a new `TotpPayload`.
                            ///
                            /// - Parameters:
                            ///   - qrCode:
                            ///   - secret:
                            ///   - uri:
                            public init(
                                qrCode: Swift.String? = nil,
                                secret: Swift.String? = nil,
                                uri: Swift.String? = nil
                            ) {
                                self.qrCode = qrCode
                                self.secret = secret
                                self.uri = uri
                            }
                            public enum CodingKeys: String, CodingKey {
                                case qrCode = "qr_code"
                                case secret
                                case uri
                            }
                        }
                        /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/json/totp`.
                        public var totp: Operations.PostFactors.Output.Ok.Body.JsonPayload.TotpPayload?
                        /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/json/phone`.
                        public var phone: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - _type:
                        ///   - totp:
                        ///   - phone:
                        public init(
                            id: Swift.String? = nil,
                            _type: Operations.PostFactors.Output.Ok.Body.JsonPayload._TypePayload? = nil,
                            totp: Operations.PostFactors.Output.Ok.Body.JsonPayload.TotpPayload? = nil,
                            phone: Swift.String? = nil
                        ) {
                            self.id = id
                            self._type = _type
                            self.totp = totp
                            self.phone = phone
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case _type = "type"
                            case totp
                            case phone
                        }
                    }
                    /// - Remark: Generated from `#/paths/factors/POST/responses/200/content/application\/json`.
                    case json(Operations.PostFactors.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostFactors.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostFactors.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostFactors.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A new factor was created in the unverified state. Call `POST /factors/{factorId}/verify' to verify it.
            ///
            ///
            /// - Remark: Generated from `#/paths//factors/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostFactors.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostFactors.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//factors/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a new challenge for a MFA factor.
    ///
    /// - Remark: HTTP `POST /factors/{factorId}/challenge`.
    /// - Remark: Generated from `#/paths//factors/{factorId}/challenge/post`.
    public enum PostFactorsFactorIdChallenge {
        public static let id: Swift.String = "post/factors/{factorId}/challenge"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/path/factorId`.
                public var factorId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - factorId:
                public init(factorId: Swift.String) {
                    self.factorId = factorId
                }
            }
            public var path: Operations.PostFactorsFactorIdChallenge.Input.Path
            /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostFactorsFactorIdChallenge.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostFactorsFactorIdChallenge.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostFactorsFactorIdChallenge.Input.Headers
            /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/requestBody/json/channel`.
                    @frozen public enum ChannelPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case sms = "sms"
                        case whatsapp = "whatsapp"
                    }
                    /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/requestBody/json/channel`.
                    public var channel: Operations.PostFactorsFactorIdChallenge.Input.Body.JsonPayload.ChannelPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - channel:
                    public init(channel: Operations.PostFactorsFactorIdChallenge.Input.Body.JsonPayload.ChannelPayload? = nil) {
                        self.channel = channel
                    }
                    public enum CodingKeys: String, CodingKey {
                        case channel
                    }
                }
                /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/requestBody/content/application\/json`.
                case json(Operations.PostFactorsFactorIdChallenge.Input.Body.JsonPayload)
            }
            public var body: Operations.PostFactorsFactorIdChallenge.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.PostFactorsFactorIdChallenge.Input.Path,
                headers: Operations.PostFactorsFactorIdChallenge.Input.Headers = .init(),
                body: Operations.PostFactorsFactorIdChallenge.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/responses/200/content/json`.
                    @frozen public enum JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/responses/200/content/json/case1`.
                        case TOTPPhoneChallengeResponse(Components.Schemas.TOTPPhoneChallengeResponse)
                        /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/responses/200/content/json/case2`.
                        case WebAuthnChallengeResponse(Components.Schemas.WebAuthnChallengeResponse)
                        public init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .TOTPPhoneChallengeResponse(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .WebAuthnChallengeResponse(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        public func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .TOTPPhoneChallengeResponse(value):
                                try value.encode(to: encoder)
                            case let .WebAuthnChallengeResponse(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/factors/{factorId}/challenge/POST/responses/200/content/application\/json`.
                    case json(Operations.PostFactorsFactorIdChallenge.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostFactorsFactorIdChallenge.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostFactorsFactorIdChallenge.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostFactorsFactorIdChallenge.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A new challenge was generated for the factor. Use `POST /factors/{factorId}/verify` to verify the challenge.
            ///
            ///
            /// - Remark: Generated from `#/paths//factors/{factorId}/challenge/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostFactorsFactorIdChallenge.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostFactorsFactorIdChallenge.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//factors/{factorId}/challenge/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//factors/{factorId}/challenge/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Verify a challenge on a factor.
    ///
    /// - Remark: HTTP `POST /factors/{factorId}/verify`.
    /// - Remark: Generated from `#/paths//factors/{factorId}/verify/post`.
    public enum PostFactorsFactorIdVerify {
        public static let id: Swift.String = "post/factors/{factorId}/verify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/factors/{factorId}/verify/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/factors/{factorId}/verify/POST/path/factorId`.
                public var factorId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - factorId:
                public init(factorId: Swift.String) {
                    self.factorId = factorId
                }
            }
            public var path: Operations.PostFactorsFactorIdVerify.Input.Path
            /// - Remark: Generated from `#/paths/factors/{factorId}/verify/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostFactorsFactorIdVerify.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostFactorsFactorIdVerify.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostFactorsFactorIdVerify.Input.Headers
            /// - Remark: Generated from `#/paths/factors/{factorId}/verify/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/factors/{factorId}/verify/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/factors/{factorId}/verify/POST/requestBody/json/challenge_id`.
                    public var challengeId: Swift.String
                    /// - Remark: Generated from `#/paths/factors/{factorId}/verify/POST/requestBody/json/code`.
                    public var code: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - challengeId:
                    ///   - code:
                    public init(
                        challengeId: Swift.String,
                        code: Swift.String? = nil
                    ) {
                        self.challengeId = challengeId
                        self.code = code
                    }
                    public enum CodingKeys: String, CodingKey {
                        case challengeId = "challenge_id"
                        case code
                    }
                }
                /// - Remark: Generated from `#/paths/factors/{factorId}/verify/POST/requestBody/content/application\/json`.
                case json(Operations.PostFactorsFactorIdVerify.Input.Body.JsonPayload)
            }
            public var body: Operations.PostFactorsFactorIdVerify.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.PostFactorsFactorIdVerify.Input.Path,
                headers: Operations.PostFactorsFactorIdVerify.Input.Headers = .init(),
                body: Operations.PostFactorsFactorIdVerify.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/factors/{factorId}/verify/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/factors/{factorId}/verify/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccessTokenResponseSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccessTokenResponseSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostFactorsFactorIdVerify.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostFactorsFactorIdVerify.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// This challenge has been verified. Client libraries should replace their stored access and refresh tokens with the ones provided in this response. These new credentials have an increased Authenticator Assurance Level (AAL).
            ///
            ///
            /// - Remark: Generated from `#/paths//factors/{factorId}/verify/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostFactorsFactorIdVerify.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostFactorsFactorIdVerify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//factors/{factorId}/verify/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//factors/{factorId}/verify/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a MFA factor from a user.
    ///
    /// - Remark: HTTP `DELETE /factors/{factorId}`.
    /// - Remark: Generated from `#/paths//factors/{factorId}/delete`.
    public enum DeleteFactorsFactorId {
        public static let id: Swift.String = "delete/factors/{factorId}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/factors/{factorId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/factors/{factorId}/DELETE/path/factorId`.
                public var factorId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - factorId:
                public init(factorId: Swift.String) {
                    self.factorId = factorId
                }
            }
            public var path: Operations.DeleteFactorsFactorId.Input.Path
            /// - Remark: Generated from `#/paths/factors/{factorId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteFactorsFactorId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteFactorsFactorId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteFactorsFactorId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteFactorsFactorId.Input.Path,
                headers: Operations.DeleteFactorsFactorId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/factors/{factorId}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/factors/{factorId}/DELETE/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/factors/{factorId}/DELETE/responses/200/content/json/id`.
                        public var id: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        public init(id: Swift.String? = nil) {
                            self.id = id
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                        }
                    }
                    /// - Remark: Generated from `#/paths/factors/{factorId}/DELETE/responses/200/content/application\/json`.
                    case json(Operations.DeleteFactorsFactorId.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteFactorsFactorId.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteFactorsFactorId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteFactorsFactorId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// This MFA factor is removed (unenrolled) and cannot be used for increasing the AAL level of user's sessions. Client libraries should use the `POST /token?grant_type=refresh_token` endpoint to get a new access and refresh token with a decreased AAL.
            ///
            ///
            /// - Remark: Generated from `#/paths//factors/{factorId}/delete/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteFactorsFactorId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteFactorsFactorId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//factors/{factorId}/delete/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Redirects OAuth flow errors to the frontend app.
    ///
    /// When an OAuth sign-in flow fails for any reason, the error message needs to be delivered to the frontend app requesting the flow. This callback delivers the errors as `error` and `error_description` query params. Usually this request is not called directly.
    ///
    ///
    /// - Remark: HTTP `GET /callback`.
    /// - Remark: Generated from `#/paths//callback/get`.
    public enum GetCallback {
        public static let id: Swift.String = "get/callback"
        public struct Input: Sendable, Hashable {
            /// Creates a new `Input`.
            public init() {}
        }
        @frozen public enum Output: Sendable, Hashable {
            /// HTTP Redirect to a URL containing the `error` and `error_description` query parameters which should be shown to the user requesting the OAuth sign-in flow.
            ///
            ///
            /// - Remark: Generated from `#/paths//callback/get/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Components.Responses.OAuthCallbackRedirectResponse)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Components.Responses.OAuthCallbackRedirectResponse {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Redirects OAuth flow errors to the frontend app.
    ///
    /// When an OAuth sign-in flow fails for any reason, the error message needs to be delivered to the frontend app requesting the flow. This callback delivers the errors as `error` and `error_description` query params. Usually this request is not called directly.
    ///
    ///
    /// - Remark: HTTP `POST /callback`.
    /// - Remark: Generated from `#/paths//callback/post`.
    public enum PostCallback {
        public static let id: Swift.String = "post/callback"
        public struct Input: Sendable, Hashable {
            /// Creates a new `Input`.
            public init() {}
        }
        @frozen public enum Output: Sendable, Hashable {
            /// HTTP Redirect to a URL containing the `error` and `error_description` query parameters which should be shown to the user requesting the OAuth sign-in flow.
            ///
            ///
            /// - Remark: Generated from `#/paths//callback/post/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Components.Responses.OAuthCallbackRedirectResponse)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Components.Responses.OAuthCallbackRedirectResponse {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Initiate a Single-Sign On flow.
    ///
    /// - Remark: HTTP `POST /sso`.
    /// - Remark: Generated from `#/paths//sso/post`.
    public enum PostSso {
        public static let id: Swift.String = "post/sso"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/sso/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSso.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSso.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSso.Input.Headers
            /// - Remark: Generated from `#/paths/sso/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sso/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Email address domain used to identify the SSO provider.
                    ///
                    /// - Remark: Generated from `#/paths/sso/POST/requestBody/json/domain`.
                    public var domain: Swift.String?
                    /// - Remark: Generated from `#/paths/sso/POST/requestBody/json/provider_id`.
                    public var providerId: Swift.String?
                    /// - Remark: Generated from `#/paths/sso/POST/requestBody/json/redirect_to`.
                    public var redirectTo: Swift.String?
                    /// Set to `true` if the response to this request should not be a HTTP 303 redirect -- useful for browser-based applications.
                    ///
                    /// - Remark: Generated from `#/paths/sso/POST/requestBody/json/skip_http_redirect`.
                    public var skipHttpRedirect: Swift.Bool?
                    /// - Remark: Generated from `#/paths/sso/POST/requestBody/json/code_challenge`.
                    public var codeChallenge: Swift.String?
                    /// - Remark: Generated from `#/paths/sso/POST/requestBody/json/code_challenge_method`.
                    @frozen public enum CodeChallengeMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case plain = "plain"
                        case s256 = "s256"
                    }
                    /// - Remark: Generated from `#/paths/sso/POST/requestBody/json/code_challenge_method`.
                    public var codeChallengeMethod: Operations.PostSso.Input.Body.JsonPayload.CodeChallengeMethodPayload?
                    /// - Remark: Generated from `#/paths/sso/POST/requestBody/json/gotrue_meta_security`.
                    public var gotrueMetaSecurity: Components.Schemas.GoTrueSecurity?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - domain: Email address domain used to identify the SSO provider.
                    ///   - providerId:
                    ///   - redirectTo:
                    ///   - skipHttpRedirect: Set to `true` if the response to this request should not be a HTTP 303 redirect -- useful for browser-based applications.
                    ///   - codeChallenge:
                    ///   - codeChallengeMethod:
                    ///   - gotrueMetaSecurity:
                    public init(
                        domain: Swift.String? = nil,
                        providerId: Swift.String? = nil,
                        redirectTo: Swift.String? = nil,
                        skipHttpRedirect: Swift.Bool? = nil,
                        codeChallenge: Swift.String? = nil,
                        codeChallengeMethod: Operations.PostSso.Input.Body.JsonPayload.CodeChallengeMethodPayload? = nil,
                        gotrueMetaSecurity: Components.Schemas.GoTrueSecurity? = nil
                    ) {
                        self.domain = domain
                        self.providerId = providerId
                        self.redirectTo = redirectTo
                        self.skipHttpRedirect = skipHttpRedirect
                        self.codeChallenge = codeChallenge
                        self.codeChallengeMethod = codeChallengeMethod
                        self.gotrueMetaSecurity = gotrueMetaSecurity
                    }
                    public enum CodingKeys: String, CodingKey {
                        case domain
                        case providerId = "provider_id"
                        case redirectTo = "redirect_to"
                        case skipHttpRedirect = "skip_http_redirect"
                        case codeChallenge = "code_challenge"
                        case codeChallengeMethod = "code_challenge_method"
                        case gotrueMetaSecurity = "gotrue_meta_security"
                    }
                }
                /// - Remark: Generated from `#/paths/sso/POST/requestBody/content/application\/json`.
                case json(Operations.PostSso.Input.Body.JsonPayload)
            }
            public var body: Operations.PostSso.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostSso.Input.Headers = .init(),
                body: Operations.PostSso.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sso/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sso/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/sso/POST/responses/200/content/json/url`.
                        public var url: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - url:
                        public init(url: Swift.String? = nil) {
                            self.url = url
                        }
                        public enum CodingKeys: String, CodingKey {
                            case url
                        }
                    }
                    /// - Remark: Generated from `#/paths/sso/POST/responses/200/content/application\/json`.
                    case json(Operations.PostSso.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostSso.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSso.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSso.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Returned only when `skip_http_redirect` is `true` and the SSO provider could be identified from the `provider_id` or `domain`. Client libraries should use the returned URL to redirect or open a browser.
            ///
            ///
            /// - Remark: Generated from `#/paths//sso/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostSso.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostSso.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct SeeOther: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sso/POST/responses/303/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sso/POST/responses/303/headers/Location`.
                    public var location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - location:
                    public init(location: Swift.String? = nil) {
                        self.location = location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostSso.Output.SeeOther.Headers
                /// Creates a new `SeeOther`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.PostSso.Output.SeeOther.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Returned only when `skip_http_redirect` is `false` or not present and the SSO provider could be identified from the `provider_id` or `domain`. Client libraries should follow the redirect. 303 is used instead of 302 because the request should be executed with a `GET` verb.
            ///
            ///
            /// - Remark: Generated from `#/paths//sso/post/responses/303`.
            ///
            /// HTTP response code: `303 seeOther`.
            case seeOther(Operations.PostSso.Output.SeeOther)
            /// The associated value of the enum case if `self` is `.seeOther`.
            ///
            /// - Throws: An error if `self` is not `.seeOther`.
            /// - SeeAlso: `.seeOther`.
            public var seeOther: Operations.PostSso.Output.SeeOther {
                get throws {
                    switch self {
                    case let .seeOther(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "seeOther",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//sso/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/sso/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/sso/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostSso.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostSso.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Returned when the SSO provider could not be identified.
            ///
            ///
            /// - Remark: Generated from `#/paths//sso/post/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PostSso.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.PostSso.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Returns the SAML 2.0 Metadata XML.
    ///
    /// The metadata XML can be downloaded or used for the SAML 2.0 Metadata URL discovery mechanism. This URL is the SAML 2.0 EntityID of the Service Provider implemented by this server.
    ///
    ///
    /// - Remark: HTTP `GET /saml/metadata`.
    /// - Remark: Generated from `#/paths//saml/metadata/get`.
    public enum GetSamlMetadata {
        public static let id: Swift.String = "get/saml/metadata"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/saml/metadata/GET/query`.
            public struct Query: Sendable, Hashable {
                /// If set to `true` will add a `Content-Disposition` header to the response which will trigger a download dialog on the browser.
                ///
                ///
                /// - Remark: Generated from `#/paths/saml/metadata/GET/query/download`.
                public var download: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - download: If set to `true` will add a `Content-Disposition` header to the response which will trigger a download dialog on the browser.
                public init(download: Swift.Bool? = nil) {
                    self.download = download
                }
            }
            public var query: Operations.GetSamlMetadata.Input.Query
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            public init(query: Operations.GetSamlMetadata.Input.Query = .init()) {
                self.query = query
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/saml/metadata/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// Present if `download=true`, which triggers the browser to show a donwload dialog.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/saml/metadata/GET/responses/200/headers/Content-Disposition`.
                    public var contentDisposition: Swift.String?
                    /// Should be parsed and obeyed to avoid putting strain on the server.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/saml/metadata/GET/responses/200/headers/Cache-Control`.
                    public var cacheControl: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentDisposition: Present if `download=true`, which triggers the browser to show a donwload dialog.
                    ///   - cacheControl: Should be parsed and obeyed to avoid putting strain on the server.
                    public init(
                        contentDisposition: Swift.String? = nil,
                        cacheControl: Swift.String? = nil
                    ) {
                        self.contentDisposition = contentDisposition
                        self.cacheControl = cacheControl
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetSamlMetadata.Output.Ok.Headers
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.GetSamlMetadata.Output.Ok.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// A valid SAML 2.0 Metadata XML document. Should be cached according to the `Cache-Control` header and/or caching data specified in the document itself.
            ///
            ///
            /// - Remark: Generated from `#/paths//saml/metadata/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetSamlMetadata.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetSamlMetadata.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// SAML 2.0 Assertion Consumer Service (ACS) endpoint.
    ///
    /// Implements the SAML 2.0 Assertion Consumer Service (ACS) endpoint supporting the POST and Artifact bindings.
    ///
    ///
    /// - Remark: HTTP `POST /saml/acs`.
    /// - Remark: Generated from `#/paths//saml/acs/post`.
    public enum PostSamlAcs {
        public static let id: Swift.String = "post/saml/acs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/saml/acs/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/saml/acs/POST/query/RelayState`.
                @frozen public enum RelayStatePayload: Codable, Hashable, Sendable {
                    /// URL to take the user to after the ACS has been verified. Often sent by Identity Provider initiated login requests.
                    ///
                    /// - Remark: Generated from `#/paths/saml/acs/POST/query/RelayState/case1`.
                    case case1(Swift.String)
                    /// UUID of the SAML Relay State stored in the database, used to identify the Service Provider initiated login request.
                    ///
                    /// - Remark: Generated from `#/paths/saml/acs/POST/query/RelayState/case2`.
                    case case2(Swift.String)
                    public init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    public func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/saml/acs/POST/query/RelayState`.
                public var relayState: Operations.PostSamlAcs.Input.Query.RelayStatePayload?
                /// See the SAML 2.0 ACS specification. Cannot be used without a UUID `RelayState` parameter.
                ///
                ///
                /// - Remark: Generated from `#/paths/saml/acs/POST/query/SAMLArt`.
                public var samlArt: Swift.String?
                /// See the SAML 2.0 ACS specification. Must be present unless `SAMLArt` is specified. If `RelayState` is not a UUID, the SAML Response is unpacked and the identity provider is identified from the response.
                ///
                ///
                /// - Remark: Generated from `#/paths/saml/acs/POST/query/SAMLResponse`.
                public var samlResponse: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - relayState:
                ///   - samlArt: See the SAML 2.0 ACS specification. Cannot be used without a UUID `RelayState` parameter.
                ///   - samlResponse: See the SAML 2.0 ACS specification. Must be present unless `SAMLArt` is specified. If `RelayState` is not a UUID, the SAML Response is unpacked and the identity provider is identified from the response.
                public init(
                    relayState: Operations.PostSamlAcs.Input.Query.RelayStatePayload? = nil,
                    samlArt: Swift.String? = nil,
                    samlResponse: Swift.String? = nil
                ) {
                    self.relayState = relayState
                    self.samlArt = samlArt
                    self.samlResponse = samlResponse
                }
            }
            public var query: Operations.PostSamlAcs.Input.Query
            /// - Remark: Generated from `#/paths/saml/acs/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSamlAcs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostSamlAcs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostSamlAcs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.PostSamlAcs.Input.Query = .init(),
                headers: Operations.PostSamlAcs.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// HTTP See Other redirect response where `Location` is a specially formatted URL that includes an `access_token`, `refresh_token`, `expires_in` as URL query encoded values in the URL fragment (anything after `#`). These values are encoded in the fragment as this value is only visible to the browser handling the redirect and is not sent to the server.
            ///
            ///
            /// - Remark: Generated from `#/paths//saml/acs/post/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Components.Responses.AccessRefreshTokenRedirectResponse)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Components.Responses.AccessRefreshTokenRedirectResponse {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//saml/acs/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//saml/acs/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Invite a user by email.
    ///
    /// Sends an invitation email which contains a link that allows the user to sign-in.
    ///
    ///
    /// - Remark: HTTP `POST /invite`.
    /// - Remark: Generated from `#/paths//invite/post`.
    public enum PostInvite {
        public static let id: Swift.String = "post/invite"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/invite/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostInvite.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostInvite.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostInvite.Input.Headers
            /// - Remark: Generated from `#/paths/invite/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/invite/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/invite/POST/requestBody/json/email`.
                    public var email: Swift.String
                    /// - Remark: Generated from `#/paths/invite/POST/requestBody/json/data`.
                    public var data: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email:
                    ///   - data:
                    public init(
                        email: Swift.String,
                        data: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                    ) {
                        self.email = email
                        self.data = data
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case data
                    }
                }
                /// - Remark: Generated from `#/paths/invite/POST/requestBody/content/application\/json`.
                case json(Operations.PostInvite.Input.Body.JsonPayload)
            }
            public var body: Operations.PostInvite.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostInvite.Input.Headers = .init(),
                body: Operations.PostInvite.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/invite/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/invite/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostInvite.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// An invitation has been sent to the user.
            ///
            /// - Remark: Generated from `#/paths//invite/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostInvite.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostInvite.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//invite/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/invite/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/invite/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostInvite.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostInvite.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// User already exists and has confirmed their address.
            ///
            /// - Remark: Generated from `#/paths//invite/post/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.PostInvite.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.PostInvite.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Generate a link to send in an email message.
    ///
    /// - Remark: HTTP `POST /admin/generate_link`.
    /// - Remark: Generated from `#/paths//admin/generate_link/post`.
    public enum PostAdminGenerateLink {
        public static let id: Swift.String = "post/admin/generate_link"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/generate_link/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAdminGenerateLink.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAdminGenerateLink.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAdminGenerateLink.Input.Headers
            /// - Remark: Generated from `#/paths/admin/generate_link/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/generate_link/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/requestBody/json/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case magiclink = "magiclink"
                        case signup = "signup"
                        case recovery = "recovery"
                        case emailChangeCurrent = "email_change_current"
                        case emailChangeNew = "email_change_new"
                    }
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/requestBody/json/type`.
                    public var _type: Operations.PostAdminGenerateLink.Input.Body.JsonPayload._TypePayload
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/requestBody/json/email`.
                    public var email: Swift.String
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/requestBody/json/new_email`.
                    public var newEmail: Swift.String?
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/requestBody/json/password`.
                    public var password: Swift.String?
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/requestBody/json/data`.
                    public var data: OpenAPIRuntime.OpenAPIObjectContainer?
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/requestBody/json/redirect_to`.
                    public var redirectTo: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - _type:
                    ///   - email:
                    ///   - newEmail:
                    ///   - password:
                    ///   - data:
                    ///   - redirectTo:
                    public init(
                        _type: Operations.PostAdminGenerateLink.Input.Body.JsonPayload._TypePayload,
                        email: Swift.String,
                        newEmail: Swift.String? = nil,
                        password: Swift.String? = nil,
                        data: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                        redirectTo: Swift.String? = nil
                    ) {
                        self._type = _type
                        self.email = email
                        self.newEmail = newEmail
                        self.password = password
                        self.data = data
                        self.redirectTo = redirectTo
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case email
                        case newEmail = "new_email"
                        case password
                        case data
                        case redirectTo = "redirect_to"
                    }
                }
                /// - Remark: Generated from `#/paths/admin/generate_link/POST/requestBody/content/application\/json`.
                case json(Operations.PostAdminGenerateLink.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAdminGenerateLink.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAdminGenerateLink.Input.Headers = .init(),
                body: Operations.PostAdminGenerateLink.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/200/content/json/action_link`.
                        public var actionLink: Swift.String?
                        /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/200/content/json/email_otp`.
                        public var emailOtp: Swift.String?
                        /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/200/content/json/hashed_token`.
                        public var hashedToken: Swift.String?
                        /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/200/content/json/verification_type`.
                        public var verificationType: Swift.String?
                        /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/200/content/json/redirect_to`.
                        public var redirectTo: Swift.String?
                        /// A container of undocumented properties.
                        public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - actionLink:
                        ///   - emailOtp:
                        ///   - hashedToken:
                        ///   - verificationType:
                        ///   - redirectTo:
                        ///   - additionalProperties: A container of undocumented properties.
                        public init(
                            actionLink: Swift.String? = nil,
                            emailOtp: Swift.String? = nil,
                            hashedToken: Swift.String? = nil,
                            verificationType: Swift.String? = nil,
                            redirectTo: Swift.String? = nil,
                            additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()
                        ) {
                            self.actionLink = actionLink
                            self.emailOtp = emailOtp
                            self.hashedToken = hashedToken
                            self.verificationType = verificationType
                            self.redirectTo = redirectTo
                            self.additionalProperties = additionalProperties
                        }
                        public enum CodingKeys: String, CodingKey {
                            case actionLink = "action_link"
                            case emailOtp = "email_otp"
                            case hashedToken = "hashed_token"
                            case verificationType = "verification_type"
                            case redirectTo = "redirect_to"
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.actionLink = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .actionLink
                            )
                            self.emailOtp = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .emailOtp
                            )
                            self.hashedToken = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .hashedToken
                            )
                            self.verificationType = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .verificationType
                            )
                            self.redirectTo = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .redirectTo
                            )
                            additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                                "action_link",
                                "email_otp",
                                "hashed_token",
                                "verification_type",
                                "redirect_to"
                            ])
                        }
                        public func encode(to encoder: any Encoder) throws {
                            var container = encoder.container(keyedBy: CodingKeys.self)
                            try container.encodeIfPresent(
                                self.actionLink,
                                forKey: .actionLink
                            )
                            try container.encodeIfPresent(
                                self.emailOtp,
                                forKey: .emailOtp
                            )
                            try container.encodeIfPresent(
                                self.hashedToken,
                                forKey: .hashedToken
                            )
                            try container.encodeIfPresent(
                                self.verificationType,
                                forKey: .verificationType
                            )
                            try container.encodeIfPresent(
                                self.redirectTo,
                                forKey: .redirectTo
                            )
                            try encoder.encodeAdditionalProperties(additionalProperties)
                        }
                    }
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/200/content/application\/json`.
                    case json(Operations.PostAdminGenerateLink.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostAdminGenerateLink.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAdminGenerateLink.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAdminGenerateLink.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User profile and generated link information.
            ///
            /// - Remark: Generated from `#/paths//admin/generate_link/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAdminGenerateLink.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAdminGenerateLink.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/generate_link/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/generate_link/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/generate_link/post/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAdminGenerateLink.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAdminGenerateLink.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// There is no such user.
            ///
            /// - Remark: Generated from `#/paths//admin/generate_link/post/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PostAdminGenerateLink.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.PostAdminGenerateLink.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/generate_link/POST/responses/422/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAdminGenerateLink.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAdminGenerateLink.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Has multiple meanings:
            ///   - User already exists
            ///   - Provided password does not meet minimum criteria
            ///   - Secure email change not enabled
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/generate_link/post/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.PostAdminGenerateLink.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.PostAdminGenerateLink.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch audit log events.
    ///
    /// - Remark: HTTP `GET /admin/audit`.
    /// - Remark: Generated from `#/paths//admin/audit/get`.
    public enum GetAdminAudit {
        public static let id: Swift.String = "get/admin/audit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/audit/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/audit/GET/query/page`.
                public var page: Swift.Int?
                /// - Remark: Generated from `#/paths/admin/audit/GET/query/per_page`.
                public var perPage: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page:
                ///   - perPage:
                public init(
                    page: Swift.Int? = nil,
                    perPage: Swift.Int? = nil
                ) {
                    self.page = page
                    self.perPage = perPage
                }
            }
            public var query: Operations.GetAdminAudit.Input.Query
            /// - Remark: Generated from `#/paths/admin/audit/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminAudit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminAudit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAdminAudit.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetAdminAudit.Input.Query = .init(),
                headers: Operations.GetAdminAudit.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload`.
                    public struct JsonPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/id`.
                        public var id: Swift.String?
                        /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/payload`.
                        public struct PayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/payload/actor_id`.
                            public var actorId: Swift.String?
                            /// Whether the actor used a SSO protocol (like SAML 2.0 or OIDC) to authenticate.
                            ///
                            /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/payload/actor_via_sso`.
                            public var actorViaSso: Swift.Bool?
                            /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/payload/actor_username`.
                            public var actorUsername: Swift.String?
                            /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/payload/actor_name`.
                            public var actorName: Swift.String?
                            /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/payload/traits`.
                            public var traits: OpenAPIRuntime.OpenAPIObjectContainer?
                            /// Usually one of these values:
                            /// - login
                            /// - logout
                            /// - invite_accepted
                            /// - user_signedup
                            /// - user_invited
                            /// - user_deleted
                            /// - user_modified
                            /// - user_recovery_requested
                            /// - user_reauthenticate_requested
                            /// - user_confirmation_requested
                            /// - user_repeated_signup
                            /// - user_updated_password
                            /// - token_revoked
                            /// - token_refreshed
                            /// - generate_recovery_codes
                            /// - factor_in_progress
                            /// - factor_unenrolled
                            /// - challenge_created
                            /// - verification_attempted
                            /// - factor_deleted
                            /// - recovery_codes_deleted
                            /// - factor_updated
                            /// - mfa_code_login
                            ///
                            /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/payload/action`.
                            public var action: Swift.String?
                            /// Usually one of these values:
                            /// - account
                            /// - team
                            /// - token
                            /// - user
                            /// - factor
                            /// - recovery_codes
                            ///
                            /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/payload/log_type`.
                            public var logType: Swift.String?
                            /// Creates a new `PayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - actorId:
                            ///   - actorViaSso: Whether the actor used a SSO protocol (like SAML 2.0 or OIDC) to authenticate.
                            ///   - actorUsername:
                            ///   - actorName:
                            ///   - traits:
                            ///   - action: Usually one of these values:
                            ///   - logType: Usually one of these values:
                            public init(
                                actorId: Swift.String? = nil,
                                actorViaSso: Swift.Bool? = nil,
                                actorUsername: Swift.String? = nil,
                                actorName: Swift.String? = nil,
                                traits: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                                action: Swift.String? = nil,
                                logType: Swift.String? = nil
                            ) {
                                self.actorId = actorId
                                self.actorViaSso = actorViaSso
                                self.actorUsername = actorUsername
                                self.actorName = actorName
                                self.traits = traits
                                self.action = action
                                self.logType = logType
                            }
                            public enum CodingKeys: String, CodingKey {
                                case actorId = "actor_id"
                                case actorViaSso = "actor_via_sso"
                                case actorUsername = "actor_username"
                                case actorName = "actor_name"
                                case traits
                                case action
                                case logType = "log_type"
                            }
                        }
                        /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/payload`.
                        public var payload: Operations.GetAdminAudit.Output.Ok.Body.JsonPayloadPayload.PayloadPayload?
                        /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/created_at`.
                        public var createdAt: Foundation.Date?
                        /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/JsonPayload/ip_address`.
                        public var ipAddress: Swift.String?
                        /// Creates a new `JsonPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - payload:
                        ///   - createdAt:
                        ///   - ipAddress:
                        public init(
                            id: Swift.String? = nil,
                            payload: Operations.GetAdminAudit.Output.Ok.Body.JsonPayloadPayload.PayloadPayload? = nil,
                            createdAt: Foundation.Date? = nil,
                            ipAddress: Swift.String? = nil
                        ) {
                            self.id = id
                            self.payload = payload
                            self.createdAt = createdAt
                            self.ipAddress = ipAddress
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case payload
                            case createdAt = "created_at"
                            case ipAddress = "ip_address"
                        }
                    }
                    /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/json`.
                    public typealias JsonPayload = [Operations.GetAdminAudit.Output.Ok.Body.JsonPayloadPayload]
                    /// - Remark: Generated from `#/paths/admin/audit/GET/responses/200/content/application\/json`.
                    case json(Operations.GetAdminAudit.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetAdminAudit.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminAudit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminAudit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of audit logs.
            ///
            /// - Remark: Generated from `#/paths//admin/audit/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAdminAudit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAdminAudit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/audit/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/audit/get/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch a listing of users.
    ///
    /// - Remark: HTTP `GET /admin/users`.
    /// - Remark: Generated from `#/paths//admin/users/get`.
    public enum GetAdminUsers {
        public static let id: Swift.String = "get/admin/users"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/users/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/GET/query/page`.
                public var page: Swift.Int?
                /// - Remark: Generated from `#/paths/admin/users/GET/query/per_page`.
                public var perPage: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page:
                ///   - perPage:
                public init(
                    page: Swift.Int? = nil,
                    perPage: Swift.Int? = nil
                ) {
                    self.page = page
                    self.perPage = perPage
                }
            }
            public var query: Operations.GetAdminUsers.Input.Query
            /// - Remark: Generated from `#/paths/admin/users/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminUsers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminUsers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAdminUsers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetAdminUsers.Input.Query = .init(),
                headers: Operations.GetAdminUsers.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/admin/users/GET/responses/200/content/json/aud`.
                        @available(*, deprecated)
                        public var aud: Swift.String?
                        /// - Remark: Generated from `#/paths/admin/users/GET/responses/200/content/json/users`.
                        public var users: [Components.Schemas.UserSchema]?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - aud:
                        ///   - users:
                        public init(
                            aud: Swift.String? = nil,
                            users: [Components.Schemas.UserSchema]? = nil
                        ) {
                            self.aud = aud
                            self.users = users
                        }
                        public enum CodingKeys: String, CodingKey {
                            case aud
                            case users
                        }
                    }
                    /// - Remark: Generated from `#/paths/admin/users/GET/responses/200/content/application\/json`.
                    case json(Operations.GetAdminUsers.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetAdminUsers.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminUsers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminUsers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A page of users.
            ///
            /// - Remark: Generated from `#/paths//admin/users/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAdminUsers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAdminUsers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/get/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch user account data for a user.
    ///
    /// - Remark: HTTP `GET /admin/users/{userId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/get`.
    public enum GetAdminUsersUserId {
        public static let id: Swift.String = "get/admin/users/{userId}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/users/{userId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId:
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.GetAdminUsersUserId.Input.Path
            /// - Remark: Generated from `#/paths/admin/users/{userId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminUsersUserId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminUsersUserId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAdminUsersUserId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetAdminUsersUserId.Input.Path,
                headers: Operations.GetAdminUsersUserId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminUsersUserId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminUsersUserId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User's account data.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAdminUsersUserId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAdminUsersUserId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/get/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminUsersUserId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminUsersUserId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// There is no such user.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetAdminUsersUserId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.GetAdminUsersUserId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update user's account data.
    ///
    /// - Remark: HTTP `PUT /admin/users/{userId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/put`.
    public enum PutAdminUsersUserId {
        public static let id: Swift.String = "put/admin/users/{userId}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/users/{userId}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/PUT/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId:
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.PutAdminUsersUserId.Input.Path
            /// - Remark: Generated from `#/paths/admin/users/{userId}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutAdminUsersUserId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutAdminUsersUserId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PutAdminUsersUserId.Input.Headers
            /// - Remark: Generated from `#/paths/admin/users/{userId}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.UserSchema)
            }
            public var body: Operations.PutAdminUsersUserId.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.PutAdminUsersUserId.Input.Path,
                headers: Operations.PutAdminUsersUserId.Input.Headers = .init(),
                body: Operations.PutAdminUsersUserId.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutAdminUsersUserId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PutAdminUsersUserId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User's account data was updated.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/put/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PutAdminUsersUserId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PutAdminUsersUserId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/put/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/put/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/PUT/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/PUT/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutAdminUsersUserId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PutAdminUsersUserId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// There is no such user.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/put/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PutAdminUsersUserId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.PutAdminUsersUserId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a user.
    ///
    /// - Remark: HTTP `DELETE /admin/users/{userId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/delete`.
    public enum DeleteAdminUsersUserId {
        public static let id: Swift.String = "delete/admin/users/{userId}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/users/{userId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/DELETE/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId:
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.DeleteAdminUsersUserId.Input.Path
            /// - Remark: Generated from `#/paths/admin/users/{userId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteAdminUsersUserId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteAdminUsersUserId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteAdminUsersUserId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteAdminUsersUserId.Input.Path,
                headers: Operations.DeleteAdminUsersUserId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteAdminUsersUserId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteAdminUsersUserId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User's account data.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/delete/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteAdminUsersUserId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteAdminUsersUserId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/delete/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/delete/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteAdminUsersUserId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteAdminUsersUserId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// There is no such user.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/delete/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DeleteAdminUsersUserId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DeleteAdminUsersUserId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List all of the MFA factors for a user.
    ///
    /// - Remark: HTTP `GET /admin/users/{userId}/factors`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/get`.
    public enum GetAdminUsersUserIdFactors {
        public static let id: Swift.String = "get/admin/users/{userId}/factors"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/GET/path/userId`.
                public var userId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId:
                public init(userId: Swift.String) {
                    self.userId = userId
                }
            }
            public var path: Operations.GetAdminUsersUserIdFactors.Input.Path
            /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminUsersUserIdFactors.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminUsersUserIdFactors.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAdminUsersUserIdFactors.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetAdminUsersUserIdFactors.Input.Path,
                headers: Operations.GetAdminUsersUserIdFactors.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MFAFactorSchema])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MFAFactorSchema] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminUsersUserIdFactors.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminUsersUserIdFactors.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User's MFA factors.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAdminUsersUserIdFactors.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAdminUsersUserIdFactors.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/get/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminUsersUserIdFactors.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminUsersUserIdFactors.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// There is no such user.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetAdminUsersUserIdFactors.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.GetAdminUsersUserIdFactors.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a user's MFA factor.
    ///
    /// - Remark: HTTP `PUT /admin/users/{userId}/factors/{factorId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/put`.
    public enum PutAdminUsersUserIdFactorsFactorId {
        public static let id: Swift.String = "put/admin/users/{userId}/factors/{factorId}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/PUT/path/userId`.
                public var userId: Swift.String
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/PUT/path/factorId`.
                public var factorId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - factorId:
                public init(
                    userId: Swift.String,
                    factorId: Swift.String
                ) {
                    self.userId = userId
                    self.factorId = factorId
                }
            }
            public var path: Operations.PutAdminUsersUserIdFactorsFactorId.Input.Path
            /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutAdminUsersUserIdFactorsFactorId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutAdminUsersUserIdFactorsFactorId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PutAdminUsersUserIdFactorsFactorId.Input.Headers
            /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/PUT/requestBody/content/application\/json`.
                case json(OpenAPIRuntime.OpenAPIObjectContainer)
            }
            public var body: Operations.PutAdminUsersUserIdFactorsFactorId.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.PutAdminUsersUserIdFactorsFactorId.Input.Path,
                headers: Operations.PutAdminUsersUserIdFactorsFactorId.Input.Headers = .init(),
                body: Operations.PutAdminUsersUserIdFactorsFactorId.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.MFAFactorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MFAFactorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutAdminUsersUserIdFactorsFactorId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PutAdminUsersUserIdFactorsFactorId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User's MFA factor.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/put/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PutAdminUsersUserIdFactorsFactorId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PutAdminUsersUserIdFactorsFactorId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/put/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/put/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/PUT/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/PUT/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutAdminUsersUserIdFactorsFactorId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PutAdminUsersUserIdFactorsFactorId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// There is no such user and/or factor.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/put/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PutAdminUsersUserIdFactorsFactorId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.PutAdminUsersUserIdFactorsFactorId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove a user's MFA factor.
    ///
    /// - Remark: HTTP `DELETE /admin/users/{userId}/factors/{factorId}`.
    /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/delete`.
    public enum DeleteAdminUsersUserIdFactorsFactorId {
        public static let id: Swift.String = "delete/admin/users/{userId}/factors/{factorId}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/DELETE/path/userId`.
                public var userId: Swift.String
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/DELETE/path/factorId`.
                public var factorId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - userId:
                ///   - factorId:
                public init(
                    userId: Swift.String,
                    factorId: Swift.String
                ) {
                    self.userId = userId
                    self.factorId = factorId
                }
            }
            public var path: Operations.DeleteAdminUsersUserIdFactorsFactorId.Input.Path
            /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteAdminUsersUserIdFactorsFactorId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteAdminUsersUserIdFactorsFactorId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteAdminUsersUserIdFactorsFactorId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteAdminUsersUserIdFactorsFactorId.Input.Path,
                headers: Operations.DeleteAdminUsersUserIdFactorsFactorId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.MFAFactorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MFAFactorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteAdminUsersUserIdFactorsFactorId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteAdminUsersUserIdFactorsFactorId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User's MFA factor.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/delete/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteAdminUsersUserIdFactorsFactorId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteAdminUsersUserIdFactorsFactorId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/delete/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/delete/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/users/{userId}/factors/{factorId}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteAdminUsersUserIdFactorsFactorId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteAdminUsersUserIdFactorsFactorId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// There is no such user and/or factor.
            ///
            /// - Remark: Generated from `#/paths//admin/users/{userId}/factors/{factorId}/delete/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DeleteAdminUsersUserIdFactorsFactorId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DeleteAdminUsersUserIdFactorsFactorId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch a list of all registered SSO providers.
    ///
    /// - Remark: HTTP `GET /admin/sso/providers`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/get`.
    public enum GetAdminSsoProviders {
        public static let id: Swift.String = "get/admin/sso/providers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/sso/providers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminSsoProviders.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminSsoProviders.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAdminSsoProviders.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.GetAdminSsoProviders.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/sso/providers/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/admin/sso/providers/GET/responses/200/content/json/items`.
                        public var items: [Components.Schemas.SSOProviderSchema]?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - items:
                        public init(items: [Components.Schemas.SSOProviderSchema]? = nil) {
                            self.items = items
                        }
                        public enum CodingKeys: String, CodingKey {
                            case items
                        }
                    }
                    /// - Remark: Generated from `#/paths/admin/sso/providers/GET/responses/200/content/application\/json`.
                    case json(Operations.GetAdminSsoProviders.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetAdminSsoProviders.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminSsoProviders.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminSsoProviders.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A list of all providers.
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAdminSsoProviders.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAdminSsoProviders.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Register a new SSO provider.
    ///
    /// - Remark: HTTP `POST /admin/sso/providers`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/post`.
    public enum PostAdminSsoProviders {
        public static let id: Swift.String = "post/admin/sso/providers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/sso/providers/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAdminSsoProviders.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAdminSsoProviders.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAdminSsoProviders.Input.Headers
            /// - Remark: Generated from `#/paths/admin/sso/providers/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/admin/sso/providers/POST/requestBody/json/type`.
                    @frozen public enum _TypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case saml = "saml"
                    }
                    /// - Remark: Generated from `#/paths/admin/sso/providers/POST/requestBody/json/type`.
                    public var _type: Operations.PostAdminSsoProviders.Input.Body.JsonPayload._TypePayload
                    /// - Remark: Generated from `#/paths/admin/sso/providers/POST/requestBody/json/metadata_url`.
                    public var metadataUrl: Swift.String?
                    /// - Remark: Generated from `#/paths/admin/sso/providers/POST/requestBody/json/metadata_xml`.
                    public var metadataXml: Swift.String?
                    /// - Remark: Generated from `#/paths/admin/sso/providers/POST/requestBody/json/domains`.
                    public var domains: [Swift.String]?
                    /// - Remark: Generated from `#/paths/admin/sso/providers/POST/requestBody/json/attribute_mapping`.
                    public var attributeMapping: Components.Schemas.SAMLAttributeMappingSchema?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - _type:
                    ///   - metadataUrl:
                    ///   - metadataXml:
                    ///   - domains:
                    ///   - attributeMapping:
                    public init(
                        _type: Operations.PostAdminSsoProviders.Input.Body.JsonPayload._TypePayload,
                        metadataUrl: Swift.String? = nil,
                        metadataXml: Swift.String? = nil,
                        domains: [Swift.String]? = nil,
                        attributeMapping: Components.Schemas.SAMLAttributeMappingSchema? = nil
                    ) {
                        self._type = _type
                        self.metadataUrl = metadataUrl
                        self.metadataXml = metadataXml
                        self.domains = domains
                        self.attributeMapping = attributeMapping
                    }
                    public enum CodingKeys: String, CodingKey {
                        case _type = "type"
                        case metadataUrl = "metadata_url"
                        case metadataXml = "metadata_xml"
                        case domains
                        case attributeMapping = "attribute_mapping"
                    }
                }
                /// - Remark: Generated from `#/paths/admin/sso/providers/POST/requestBody/content/application\/json`.
                case json(Operations.PostAdminSsoProviders.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAdminSsoProviders.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAdminSsoProviders.Input.Headers = .init(),
                body: Operations.PostAdminSsoProviders.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/sso/providers/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SSOProviderSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SSOProviderSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAdminSsoProviders.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAdminSsoProviders.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SSO provider was created.
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAdminSsoProviders.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAdminSsoProviders.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/post/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch SSO provider details.
    ///
    /// - Remark: HTTP `GET /admin/sso/providers/{ssoProviderId}`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/get`.
    public enum GetAdminSsoProvidersSsoProviderId {
        public static let id: Swift.String = "get/admin/sso/providers/{ssoProviderId}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/GET/path/ssoProviderId`.
                public var ssoProviderId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - ssoProviderId:
                public init(ssoProviderId: Swift.String) {
                    self.ssoProviderId = ssoProviderId
                }
            }
            public var path: Operations.GetAdminSsoProvidersSsoProviderId.Input.Path
            /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminSsoProvidersSsoProviderId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminSsoProvidersSsoProviderId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAdminSsoProvidersSsoProviderId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetAdminSsoProvidersSsoProviderId.Input.Path,
                headers: Operations.GetAdminSsoProvidersSsoProviderId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SSOProviderSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SSOProviderSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminSsoProvidersSsoProviderId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminSsoProvidersSsoProviderId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SSO provider exists with these details.
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAdminSsoProvidersSsoProviderId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAdminSsoProvidersSsoProviderId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/get/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminSsoProvidersSsoProviderId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminSsoProvidersSsoProviderId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// A provider with this UUID does not exist.
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetAdminSsoProvidersSsoProviderId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.GetAdminSsoProvidersSsoProviderId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update details about a SSO provider.
    ///
    /// You can only update only one of `metadata_url` or `metadata_xml` at once. The SAML Metadata represented by these updates must advertize the same Identity Provider EntityID. Do not include the `domains` or `attribute_mapping` property to keep the existing database values.
    ///
    ///
    /// - Remark: HTTP `PUT /admin/sso/providers/{ssoProviderId}`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/put`.
    public enum PutAdminSsoProvidersSsoProviderId {
        public static let id: Swift.String = "put/admin/sso/providers/{ssoProviderId}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/path/ssoProviderId`.
                public var ssoProviderId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - ssoProviderId:
                public init(ssoProviderId: Swift.String) {
                    self.ssoProviderId = ssoProviderId
                }
            }
            public var path: Operations.PutAdminSsoProvidersSsoProviderId.Input.Path
            /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutAdminSsoProvidersSsoProviderId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutAdminSsoProvidersSsoProviderId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PutAdminSsoProvidersSsoProviderId.Input.Headers
            /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/requestBody/json/metadata_url`.
                    public var metadataUrl: Swift.String?
                    /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/requestBody/json/metadata_xml`.
                    public var metadataXml: Swift.String?
                    /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/requestBody/json/domains`.
                    public var domains: [Swift.String]?
                    /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/requestBody/json/attribute_mapping`.
                    public var attributeMapping: Components.Schemas.SAMLAttributeMappingSchema?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - metadataUrl:
                    ///   - metadataXml:
                    ///   - domains:
                    ///   - attributeMapping:
                    public init(
                        metadataUrl: Swift.String? = nil,
                        metadataXml: Swift.String? = nil,
                        domains: [Swift.String]? = nil,
                        attributeMapping: Components.Schemas.SAMLAttributeMappingSchema? = nil
                    ) {
                        self.metadataUrl = metadataUrl
                        self.metadataXml = metadataXml
                        self.domains = domains
                        self.attributeMapping = attributeMapping
                    }
                    public enum CodingKeys: String, CodingKey {
                        case metadataUrl = "metadata_url"
                        case metadataXml = "metadata_xml"
                        case domains
                        case attributeMapping = "attribute_mapping"
                    }
                }
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/requestBody/content/application\/json`.
                case json(Operations.PutAdminSsoProvidersSsoProviderId.Input.Body.JsonPayload)
            }
            public var body: Operations.PutAdminSsoProvidersSsoProviderId.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.PutAdminSsoProvidersSsoProviderId.Input.Path,
                headers: Operations.PutAdminSsoProvidersSsoProviderId.Input.Headers = .init(),
                body: Operations.PutAdminSsoProvidersSsoProviderId.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.SSOProviderSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SSOProviderSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutAdminSsoProvidersSsoProviderId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PutAdminSsoProvidersSsoProviderId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SSO provider details were updated.
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/put/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PutAdminSsoProvidersSsoProviderId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PutAdminSsoProvidersSsoProviderId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/put/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/put/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/put/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/PUT/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutAdminSsoProvidersSsoProviderId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PutAdminSsoProvidersSsoProviderId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// A provider with this UUID does not exist.
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/put/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PutAdminSsoProvidersSsoProviderId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.PutAdminSsoProvidersSsoProviderId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Remove an SSO provider.
    ///
    /// - Remark: HTTP `DELETE /admin/sso/providers/{ssoProviderId}`.
    /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/delete`.
    public enum DeleteAdminSsoProvidersSsoProviderId {
        public static let id: Swift.String = "delete/admin/sso/providers/{ssoProviderId}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/DELETE/path/ssoProviderId`.
                public var ssoProviderId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - ssoProviderId:
                public init(ssoProviderId: Swift.String) {
                    self.ssoProviderId = ssoProviderId
                }
            }
            public var path: Operations.DeleteAdminSsoProvidersSsoProviderId.Input.Path
            /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteAdminSsoProvidersSsoProviderId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteAdminSsoProvidersSsoProviderId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteAdminSsoProvidersSsoProviderId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteAdminSsoProvidersSsoProviderId.Input.Path,
                headers: Operations.DeleteAdminSsoProvidersSsoProviderId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/DELETE/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/DELETE/responses/200/content/application\/json`.
                    case json(Components.Schemas.SSOProviderSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SSOProviderSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteAdminSsoProvidersSsoProviderId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteAdminSsoProvidersSsoProviderId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SSO provider was removed.
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/delete/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.DeleteAdminSsoProvidersSsoProviderId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.DeleteAdminSsoProvidersSsoProviderId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/delete/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/delete/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/sso/providers/{ssoProviderId}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteAdminSsoProvidersSsoProviderId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteAdminSsoProvidersSsoProviderId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// A provider with this UUID does not exist.
            ///
            /// - Remark: Generated from `#/paths//admin/sso/providers/{ssoProviderId}/delete/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DeleteAdminSsoProvidersSsoProviderId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DeleteAdminSsoProvidersSsoProviderId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List OAuth clients (admin)
    ///
    /// Retrieves a list of all registered OAuth clients. Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `GET /admin/oauth/clients`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/get`.
    public enum GetAdminOauthClients {
        public static let id: Swift.String = "get/admin/oauth/clients"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/oauth/clients/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/GET/query/page`.
                public var page: Swift.Int?
                /// - Remark: Generated from `#/paths/admin/oauth/clients/GET/query/per_page`.
                public var perPage: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page:
                ///   - perPage:
                public init(
                    page: Swift.Int? = nil,
                    perPage: Swift.Int? = nil
                ) {
                    self.page = page
                    self.perPage = perPage
                }
            }
            public var query: Operations.GetAdminOauthClients.Input.Query
            /// - Remark: Generated from `#/paths/admin/oauth/clients/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminOauthClients.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminOauthClients.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAdminOauthClients.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetAdminOauthClients.Input.Query = .init(),
                headers: Operations.GetAdminOauthClients.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/admin/oauth/clients/GET/responses/200/content/json/clients`.
                        public var clients: [Components.Schemas.OAuthClientSchema]?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - clients:
                        public init(clients: [Components.Schemas.OAuthClientSchema]? = nil) {
                            self.clients = clients
                        }
                        public enum CodingKeys: String, CodingKey {
                            case clients
                        }
                    }
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/GET/responses/200/content/application\/json`.
                    case json(Operations.GetAdminOauthClients.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetAdminOauthClients.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminOauthClients.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminOauthClients.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// List of OAuth clients
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAdminOauthClients.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAdminOauthClients.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/get/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Register OAuth client (admin)
    ///
    /// Manually register a new OAuth client (admin endpoint). Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `POST /admin/oauth/clients`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/post`.
    public enum PostAdminOauthClients {
        public static let id: Swift.String = "post/admin/oauth/clients"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAdminOauthClients.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAdminOauthClients.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAdminOauthClients.Input.Headers
            /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json/client_name`.
                    public var clientName: Swift.String
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json/client_uri`.
                    public var clientUri: Swift.String?
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json/redirect_uris`.
                    public var redirectUris: [Swift.String]
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json/GrantTypesPayload`.
                    @frozen public enum GrantTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case authorizationCode = "authorization_code"
                        case refreshToken = "refresh_token"
                    }
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json/grant_types`.
                    public typealias GrantTypesPayload = [Operations.PostAdminOauthClients.Input.Body.JsonPayload.GrantTypesPayloadPayload]
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json/grant_types`.
                    public var grantTypes: Operations.PostAdminOauthClients.Input.Body.JsonPayload.GrantTypesPayload?
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json/ResponseTypesPayload`.
                    @frozen public enum ResponseTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case code = "code"
                    }
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json/response_types`.
                    public typealias ResponseTypesPayload = [Operations.PostAdminOauthClients.Input.Body.JsonPayload.ResponseTypesPayloadPayload]
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json/response_types`.
                    public var responseTypes: Operations.PostAdminOauthClients.Input.Body.JsonPayload.ResponseTypesPayload?
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/json/scope`.
                    public var scope: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - clientName:
                    ///   - clientUri:
                    ///   - redirectUris:
                    ///   - grantTypes:
                    ///   - responseTypes:
                    ///   - scope:
                    public init(
                        clientName: Swift.String,
                        clientUri: Swift.String? = nil,
                        redirectUris: [Swift.String],
                        grantTypes: Operations.PostAdminOauthClients.Input.Body.JsonPayload.GrantTypesPayload? = nil,
                        responseTypes: Operations.PostAdminOauthClients.Input.Body.JsonPayload.ResponseTypesPayload? = nil,
                        scope: Swift.String? = nil
                    ) {
                        self.clientName = clientName
                        self.clientUri = clientUri
                        self.redirectUris = redirectUris
                        self.grantTypes = grantTypes
                        self.responseTypes = responseTypes
                        self.scope = scope
                    }
                    public enum CodingKeys: String, CodingKey {
                        case clientName = "client_name"
                        case clientUri = "client_uri"
                        case redirectUris = "redirect_uris"
                        case grantTypes = "grant_types"
                        case responseTypes = "response_types"
                        case scope
                    }
                }
                /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/requestBody/content/application\/json`.
                case json(Operations.PostAdminOauthClients.Input.Body.JsonPayload)
            }
            public var body: Operations.PostAdminOauthClients.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostAdminOauthClients.Input.Headers = .init(),
                body: Operations.PostAdminOauthClients.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.OAuthClientSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OAuthClientSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAdminOauthClients.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAdminOauthClients.Output.Created.Body) {
                    self.body = body
                }
            }
            /// OAuth client created
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/post/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.PostAdminOauthClients.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.PostAdminOauthClients.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/post/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get OAuth client details (admin)
    ///
    /// Retrieves details of a specific OAuth client. Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `GET /admin/oauth/clients/{client_id}`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/get`.
    public enum GetAdminOauthClientsClientId {
        public static let id: Swift.String = "get/admin/oauth/clients/{client_id}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/GET/path/client_id`.
                public var clientId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - clientId:
                public init(clientId: Swift.String) {
                    self.clientId = clientId
                }
            }
            public var path: Operations.GetAdminOauthClientsClientId.Input.Path
            /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminOauthClientsClientId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAdminOauthClientsClientId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAdminOauthClientsClientId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetAdminOauthClientsClientId.Input.Path,
                headers: Operations.GetAdminOauthClientsClientId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OAuthClientSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OAuthClientSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminOauthClientsClientId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminOauthClientsClientId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OAuth client details
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAdminOauthClientsClientId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAdminOauthClientsClientId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAdminOauthClientsClientId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAdminOauthClientsClientId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// OAuth client not found
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetAdminOauthClientsClientId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.GetAdminOauthClientsClientId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/get/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete OAuth client (admin)
    ///
    /// Removes an OAuth client registration. Only available when OAuth server is enabled.
    ///
    ///
    /// - Remark: HTTP `DELETE /admin/oauth/clients/{client_id}`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/delete`.
    public enum DeleteAdminOauthClientsClientId {
        public static let id: Swift.String = "delete/admin/oauth/clients/{client_id}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/DELETE/path/client_id`.
                public var clientId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - clientId:
                public init(clientId: Swift.String) {
                    self.clientId = clientId
                }
            }
            public var path: Operations.DeleteAdminOauthClientsClientId.Input.Path
            /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteAdminOauthClientsClientId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteAdminOauthClientsClientId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteAdminOauthClientsClientId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteAdminOauthClientsClientId.Input.Path,
                headers: Operations.DeleteAdminOauthClientsClientId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// OAuth client deleted
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/delete/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.DeleteAdminOauthClientsClientId.Output.NoContent)
            /// OAuth client deleted
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/delete/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.DeleteAdminOauthClientsClientId.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/DELETE/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteAdminOauthClientsClientId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.DeleteAdminOauthClientsClientId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// OAuth client not found
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/delete/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DeleteAdminOauthClientsClientId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DeleteAdminOauthClientsClientId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/delete/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/delete/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Regenerate OAuth client secret (admin)
    ///
    /// Regenerates the client secret for a confidential OAuth client. Only available when OAuth server is enabled. This endpoint can only be used for confidential clients, not public clients.
    ///
    ///
    /// - Remark: HTTP `POST /admin/oauth/clients/{client_id}/regenerate_secret`.
    /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/regenerate_secret/post`.
    public enum PostAdminOauthClientsClientIdRegenerateSecret {
        public static let id: Swift.String = "post/admin/oauth/clients/{client_id}/regenerate_secret"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/regenerate_secret/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/regenerate_secret/POST/path/client_id`.
                public var clientId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - clientId:
                public init(clientId: Swift.String) {
                    self.clientId = clientId
                }
            }
            public var path: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Input.Path
            /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/regenerate_secret/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAdminOauthClientsClientIdRegenerateSecret.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostAdminOauthClientsClientIdRegenerateSecret.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Input.Path,
                headers: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/regenerate_secret/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/regenerate_secret/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OAuthClientSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OAuthClientSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OAuth client secret regenerated successfully
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/regenerate_secret/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/regenerate_secret/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/regenerate_secret/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// Bad request - cannot regenerate secret for public client
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/regenerate_secret/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/regenerate_secret/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/admin/oauth/clients/{client_id}/regenerate_secret/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// OAuth client not found
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/regenerate_secret/post/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.PostAdminOauthClientsClientIdRegenerateSecret.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/regenerate_secret/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Forbidden response.
            ///
            ///
            /// - Remark: Generated from `#/paths//admin/oauth/clients/{client_id}/regenerate_secret/post/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.ForbiddenResponse)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Components.Responses.ForbiddenResponse {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Register a new OAuth client dynamically (public endpoint).
    ///
    /// Allows applications to register as OAuth clients with this server dynamically. This follows the OAuth 2.0 Dynamic Client Registration Protocol. Only available when OAuth server is enabled and dynamic registration is allowed (set `GOTRUE_OAUTH_SERVER_ENABLED=true` and `GOTRUE_OAUTH_SERVER_ALLOW_DYNAMIC_REGISTRATION=true` for self-hosted or enable both settings in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `POST /oauth/clients/register`.
    /// - Remark: Generated from `#/paths//oauth/clients/register/post`.
    public enum PostOauthClientsRegister {
        public static let id: Swift.String = "post/oauth/clients/register"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/oauth/clients/register/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOauthClientsRegister.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOauthClientsRegister.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostOauthClientsRegister.Input.Headers
            /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Human-readable name of the client application
                    ///
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json/client_name`.
                    public var clientName: Swift.String
                    /// URL of the client application's homepage
                    ///
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json/client_uri`.
                    public var clientUri: Swift.String?
                    /// Array of redirect URIs used by the client
                    ///
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json/redirect_uris`.
                    public var redirectUris: [Swift.String]
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json/GrantTypesPayload`.
                    @frozen public enum GrantTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case authorizationCode = "authorization_code"
                        case refreshToken = "refresh_token"
                    }
                    /// OAuth grant types the client will use
                    ///
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json/grant_types`.
                    public typealias GrantTypesPayload = [Operations.PostOauthClientsRegister.Input.Body.JsonPayload.GrantTypesPayloadPayload]
                    /// OAuth grant types the client will use
                    ///
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json/grant_types`.
                    public var grantTypes: Operations.PostOauthClientsRegister.Input.Body.JsonPayload.GrantTypesPayload?
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json/ResponseTypesPayload`.
                    @frozen public enum ResponseTypesPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case code = "code"
                    }
                    /// OAuth response types the client will use
                    ///
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json/response_types`.
                    public typealias ResponseTypesPayload = [Operations.PostOauthClientsRegister.Input.Body.JsonPayload.ResponseTypesPayloadPayload]
                    /// OAuth response types the client will use
                    ///
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json/response_types`.
                    public var responseTypes: Operations.PostOauthClientsRegister.Input.Body.JsonPayload.ResponseTypesPayload?
                    /// Space-separated list of scope values
                    ///
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/json/scope`.
                    public var scope: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - clientName: Human-readable name of the client application
                    ///   - clientUri: URL of the client application's homepage
                    ///   - redirectUris: Array of redirect URIs used by the client
                    ///   - grantTypes: OAuth grant types the client will use
                    ///   - responseTypes: OAuth response types the client will use
                    ///   - scope: Space-separated list of scope values
                    public init(
                        clientName: Swift.String,
                        clientUri: Swift.String? = nil,
                        redirectUris: [Swift.String],
                        grantTypes: Operations.PostOauthClientsRegister.Input.Body.JsonPayload.GrantTypesPayload? = nil,
                        responseTypes: Operations.PostOauthClientsRegister.Input.Body.JsonPayload.ResponseTypesPayload? = nil,
                        scope: Swift.String? = nil
                    ) {
                        self.clientName = clientName
                        self.clientUri = clientUri
                        self.redirectUris = redirectUris
                        self.grantTypes = grantTypes
                        self.responseTypes = responseTypes
                        self.scope = scope
                    }
                    public enum CodingKeys: String, CodingKey {
                        case clientName = "client_name"
                        case clientUri = "client_uri"
                        case redirectUris = "redirect_uris"
                        case grantTypes = "grant_types"
                        case responseTypes = "response_types"
                        case scope
                    }
                }
                /// - Remark: Generated from `#/paths/oauth/clients/register/POST/requestBody/content/application\/json`.
                case json(Operations.PostOauthClientsRegister.Input.Body.JsonPayload)
            }
            public var body: Operations.PostOauthClientsRegister.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostOauthClientsRegister.Input.Headers = .init(),
                body: Operations.PostOauthClientsRegister.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/clients/register/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/oauth/clients/register/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.OAuthClientSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OAuthClientSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostOauthClientsRegister.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostOauthClientsRegister.Output.Created.Body) {
                    self.body = body
                }
            }
            /// OAuth client registered successfully
            ///
            /// - Remark: Generated from `#/paths//oauth/clients/register/post/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.PostOauthClientsRegister.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.PostOauthClientsRegister.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//oauth/clients/register/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Too Many Requests response, when a rate limiter has been breached.
            ///
            ///
            /// - Remark: Generated from `#/paths//oauth/clients/register/post/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.RateLimitResponse)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Components.Responses.RateLimitResponse {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// OAuth 2.1 Token endpoint
    ///
    /// Issues access tokens in exchange for authorization codes or refresh tokens. Supports authorization_code and refresh_token grant types. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `POST /oauth/token`.
    /// - Remark: Generated from `#/paths//oauth/token/post`.
    public enum PostOauthToken {
        public static let id: Swift.String = "post/oauth/token"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/oauth/token/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOauthToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOauthToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostOauthToken.Input.Headers
            /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody/urlEncodedForm`.
                public struct UrlEncodedFormPayload: Codable, Hashable, Sendable {
                    /// The grant type being used
                    ///
                    /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody/urlEncodedForm/grant_type`.
                    @frozen public enum GrantTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case authorizationCode = "authorization_code"
                        case refreshToken = "refresh_token"
                    }
                    /// The grant type being used
                    ///
                    /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody/urlEncodedForm/grant_type`.
                    public var grantType: Operations.PostOauthToken.Input.Body.UrlEncodedFormPayload.GrantTypePayload
                    /// Authorization code (required for authorization_code grant)
                    ///
                    /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody/urlEncodedForm/code`.
                    public var code: Swift.String?
                    /// Redirect URI (required for authorization_code grant)
                    ///
                    /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody/urlEncodedForm/redirect_uri`.
                    public var redirectUri: Swift.String?
                    /// PKCE code verifier (required for authorization_code grant)
                    ///
                    /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody/urlEncodedForm/code_verifier`.
                    public var codeVerifier: Swift.String?
                    /// Refresh token (required for refresh_token grant)
                    ///
                    /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody/urlEncodedForm/refresh_token`.
                    public var refreshToken: Swift.String?
                    /// OAuth client identifier
                    ///
                    /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody/urlEncodedForm/client_id`.
                    public var clientId: Swift.String?
                    /// OAuth client secret (for confidential clients)
                    ///
                    /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody/urlEncodedForm/client_secret`.
                    public var clientSecret: Swift.String?
                    /// Creates a new `UrlEncodedFormPayload`.
                    ///
                    /// - Parameters:
                    ///   - grantType: The grant type being used
                    ///   - code: Authorization code (required for authorization_code grant)
                    ///   - redirectUri: Redirect URI (required for authorization_code grant)
                    ///   - codeVerifier: PKCE code verifier (required for authorization_code grant)
                    ///   - refreshToken: Refresh token (required for refresh_token grant)
                    ///   - clientId: OAuth client identifier
                    ///   - clientSecret: OAuth client secret (for confidential clients)
                    public init(
                        grantType: Operations.PostOauthToken.Input.Body.UrlEncodedFormPayload.GrantTypePayload,
                        code: Swift.String? = nil,
                        redirectUri: Swift.String? = nil,
                        codeVerifier: Swift.String? = nil,
                        refreshToken: Swift.String? = nil,
                        clientId: Swift.String? = nil,
                        clientSecret: Swift.String? = nil
                    ) {
                        self.grantType = grantType
                        self.code = code
                        self.redirectUri = redirectUri
                        self.codeVerifier = codeVerifier
                        self.refreshToken = refreshToken
                        self.clientId = clientId
                        self.clientSecret = clientSecret
                    }
                    public enum CodingKeys: String, CodingKey {
                        case grantType = "grant_type"
                        case code
                        case redirectUri = "redirect_uri"
                        case codeVerifier = "code_verifier"
                        case refreshToken = "refresh_token"
                        case clientId = "client_id"
                        case clientSecret = "client_secret"
                    }
                }
                /// - Remark: Generated from `#/paths/oauth/token/POST/requestBody/content/application\/x-www-form-urlencoded`.
                case urlEncodedForm(Operations.PostOauthToken.Input.Body.UrlEncodedFormPayload)
            }
            public var body: Operations.PostOauthToken.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostOauthToken.Input.Headers = .init(),
                body: Operations.PostOauthToken.Input.Body? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/token/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/oauth/token/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// The access token
                        ///
                        /// - Remark: Generated from `#/paths/oauth/token/POST/responses/200/content/json/access_token`.
                        public var accessToken: Swift.String?
                        /// Type of token issued
                        ///
                        /// - Remark: Generated from `#/paths/oauth/token/POST/responses/200/content/json/token_type`.
                        public var tokenType: Swift.String?
                        /// Lifetime in seconds of the access token
                        ///
                        /// - Remark: Generated from `#/paths/oauth/token/POST/responses/200/content/json/expires_in`.
                        public var expiresIn: Swift.Int?
                        /// Refresh token (if applicable)
                        ///
                        /// - Remark: Generated from `#/paths/oauth/token/POST/responses/200/content/json/refresh_token`.
                        public var refreshToken: Swift.String?
                        /// Authorized scopes
                        ///
                        /// - Remark: Generated from `#/paths/oauth/token/POST/responses/200/content/json/scope`.
                        public var scope: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - accessToken: The access token
                        ///   - tokenType: Type of token issued
                        ///   - expiresIn: Lifetime in seconds of the access token
                        ///   - refreshToken: Refresh token (if applicable)
                        ///   - scope: Authorized scopes
                        public init(
                            accessToken: Swift.String? = nil,
                            tokenType: Swift.String? = nil,
                            expiresIn: Swift.Int? = nil,
                            refreshToken: Swift.String? = nil,
                            scope: Swift.String? = nil
                        ) {
                            self.accessToken = accessToken
                            self.tokenType = tokenType
                            self.expiresIn = expiresIn
                            self.refreshToken = refreshToken
                            self.scope = scope
                        }
                        public enum CodingKeys: String, CodingKey {
                            case accessToken = "access_token"
                            case tokenType = "token_type"
                            case expiresIn = "expires_in"
                            case refreshToken = "refresh_token"
                            case scope
                        }
                    }
                    /// - Remark: Generated from `#/paths/oauth/token/POST/responses/200/content/application\/json`.
                    case json(Operations.PostOauthToken.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostOauthToken.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostOauthToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostOauthToken.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Access token issued successfully
            ///
            /// - Remark: Generated from `#/paths//oauth/token/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostOauthToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostOauthToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//oauth/token/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//oauth/token/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// OAuth 2.1 Authorization endpoint
    ///
    /// Initiates the OAuth authorization code flow. Redirects users to login and authorize the requesting application. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `GET /oauth/authorize`.
    /// - Remark: Generated from `#/paths//oauth/authorize/get`.
    public enum GetOauthAuthorize {
        public static let id: Swift.String = "get/oauth/authorize"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/oauth/authorize/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/authorize/GET/query/response_type`.
                @frozen public enum ResponseTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case code = "code"
                }
                /// - Remark: Generated from `#/paths/oauth/authorize/GET/query/response_type`.
                public var responseType: Operations.GetOauthAuthorize.Input.Query.ResponseTypePayload
                /// The client identifier
                ///
                /// - Remark: Generated from `#/paths/oauth/authorize/GET/query/client_id`.
                public var clientId: Swift.String
                /// Client's redirect URI
                ///
                /// - Remark: Generated from `#/paths/oauth/authorize/GET/query/redirect_uri`.
                public var redirectUri: Swift.String
                /// Requested access scope
                ///
                /// - Remark: Generated from `#/paths/oauth/authorize/GET/query/scope`.
                public var scope: Swift.String?
                /// State parameter for CSRF protection
                ///
                /// - Remark: Generated from `#/paths/oauth/authorize/GET/query/state`.
                public var state: Swift.String?
                /// PKCE code challenge
                ///
                /// - Remark: Generated from `#/paths/oauth/authorize/GET/query/code_challenge`.
                public var codeChallenge: Swift.String
                /// - Remark: Generated from `#/paths/oauth/authorize/GET/query/code_challenge_method`.
                @frozen public enum CodeChallengeMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case s256 = "S256"
                }
                /// PKCE code challenge method
                ///
                /// - Remark: Generated from `#/paths/oauth/authorize/GET/query/code_challenge_method`.
                public var codeChallengeMethod: Operations.GetOauthAuthorize.Input.Query.CodeChallengeMethodPayload
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - responseType:
                ///   - clientId: The client identifier
                ///   - redirectUri: Client's redirect URI
                ///   - scope: Requested access scope
                ///   - state: State parameter for CSRF protection
                ///   - codeChallenge: PKCE code challenge
                ///   - codeChallengeMethod: PKCE code challenge method
                public init(
                    responseType: Operations.GetOauthAuthorize.Input.Query.ResponseTypePayload,
                    clientId: Swift.String,
                    redirectUri: Swift.String,
                    scope: Swift.String? = nil,
                    state: Swift.String? = nil,
                    codeChallenge: Swift.String,
                    codeChallengeMethod: Operations.GetOauthAuthorize.Input.Query.CodeChallengeMethodPayload
                ) {
                    self.responseType = responseType
                    self.clientId = clientId
                    self.redirectUri = redirectUri
                    self.scope = scope
                    self.state = state
                    self.codeChallenge = codeChallenge
                    self.codeChallengeMethod = codeChallengeMethod
                }
            }
            public var query: Operations.GetOauthAuthorize.Input.Query
            /// - Remark: Generated from `#/paths/oauth/authorize/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetOauthAuthorize.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetOauthAuthorize.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetOauthAuthorize.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetOauthAuthorize.Input.Query,
                headers: Operations.GetOauthAuthorize.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Found: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/authorize/GET/responses/302/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/oauth/authorize/GET/responses/302/headers/Location`.
                    public var location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - location:
                    public init(location: Swift.String? = nil) {
                        self.location = location
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetOauthAuthorize.Output.Found.Headers
                /// Creates a new `Found`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.GetOauthAuthorize.Output.Found.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// Redirect to login or authorization page
            ///
            /// - Remark: Generated from `#/paths//oauth/authorize/get/responses/302`.
            ///
            /// HTTP response code: `302 found`.
            case found(Operations.GetOauthAuthorize.Output.Found)
            /// The associated value of the enum case if `self` is `.found`.
            ///
            /// - Throws: An error if `self` is not `.found`.
            /// - SeeAlso: `.found`.
            public var found: Operations.GetOauthAuthorize.Output.Found {
                get throws {
                    switch self {
                    case let .found(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "found",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//oauth/authorize/get/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get OAuth authorization details
    ///
    /// Retrieves details about a pending OAuth authorization request. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `GET /oauth/authorizations/{authorization_id}`.
    /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/get`.
    public enum GetOauthAuthorizationsAuthorizationId {
        public static let id: Swift.String = "get/oauth/authorizations/{authorization_id}"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/path/authorization_id`.
                public var authorizationId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - authorizationId:
                public init(authorizationId: Swift.String) {
                    self.authorizationId = authorizationId
                }
            }
            public var path: Operations.GetOauthAuthorizationsAuthorizationId.Input.Path
            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetOauthAuthorizationsAuthorizationId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetOauthAuthorizationsAuthorizationId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetOauthAuthorizationsAuthorizationId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetOauthAuthorizationsAuthorizationId.Input.Path,
                headers: Operations.GetOauthAuthorizationsAuthorizationId.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/authorization_id`.
                        public var authorizationId: Swift.String?
                        /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/redirect_uri`.
                        public var redirectUri: Swift.String?
                        /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/client`.
                        public struct ClientPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/client/client_id`.
                            public var clientId: Swift.String?
                            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/client/client_name`.
                            public var clientName: Swift.String?
                            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/client/client_uri`.
                            public var clientUri: Swift.String?
                            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/client/logo_uri`.
                            public var logoUri: Swift.String?
                            /// Creates a new `ClientPayload`.
                            ///
                            /// - Parameters:
                            ///   - clientId:
                            ///   - clientName:
                            ///   - clientUri:
                            ///   - logoUri:
                            public init(
                                clientId: Swift.String? = nil,
                                clientName: Swift.String? = nil,
                                clientUri: Swift.String? = nil,
                                logoUri: Swift.String? = nil
                            ) {
                                self.clientId = clientId
                                self.clientName = clientName
                                self.clientUri = clientUri
                                self.logoUri = logoUri
                            }
                            public enum CodingKeys: String, CodingKey {
                                case clientId = "client_id"
                                case clientName = "client_name"
                                case clientUri = "client_uri"
                                case logoUri = "logo_uri"
                            }
                        }
                        /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/client`.
                        public var client: Operations.GetOauthAuthorizationsAuthorizationId.Output.Ok.Body.JsonPayload.ClientPayload?
                        /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/user`.
                        public struct UserPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/user/id`.
                            public var id: Swift.String?
                            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/user/email`.
                            public var email: Swift.String?
                            /// Creates a new `UserPayload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - email:
                            public init(
                                id: Swift.String? = nil,
                                email: Swift.String? = nil
                            ) {
                                self.id = id
                                self.email = email
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case email
                            }
                        }
                        /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/user`.
                        public var user: Operations.GetOauthAuthorizationsAuthorizationId.Output.Ok.Body.JsonPayload.UserPayload?
                        /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/json/scope`.
                        public var scope: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - authorizationId:
                        ///   - redirectUri:
                        ///   - client:
                        ///   - user:
                        ///   - scope:
                        public init(
                            authorizationId: Swift.String? = nil,
                            redirectUri: Swift.String? = nil,
                            client: Operations.GetOauthAuthorizationsAuthorizationId.Output.Ok.Body.JsonPayload.ClientPayload? = nil,
                            user: Operations.GetOauthAuthorizationsAuthorizationId.Output.Ok.Body.JsonPayload.UserPayload? = nil,
                            scope: Swift.String? = nil
                        ) {
                            self.authorizationId = authorizationId
                            self.redirectUri = redirectUri
                            self.client = client
                            self.user = user
                            self.scope = scope
                        }
                        public enum CodingKeys: String, CodingKey {
                            case authorizationId = "authorization_id"
                            case redirectUri = "redirect_uri"
                            case client
                            case user
                            case scope
                        }
                    }
                    /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.GetOauthAuthorizationsAuthorizationId.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetOauthAuthorizationsAuthorizationId.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetOauthAuthorizationsAuthorizationId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetOauthAuthorizationsAuthorizationId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Authorization details
            ///
            /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetOauthAuthorizationsAuthorizationId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetOauthAuthorizationsAuthorizationId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.ErrorSchema)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ErrorSchema {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetOauthAuthorizationsAuthorizationId.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetOauthAuthorizationsAuthorizationId.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Authorization not found
            ///
            /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/get/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetOauthAuthorizationsAuthorizationId.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.GetOauthAuthorizationsAuthorizationId.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/get/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Approve or deny OAuth authorization
    ///
    /// User approves or denies authorization to the OAuth client. Only available when OAuth server is enabled (set `GOTRUE_OAUTH_SERVER_ENABLED=true` for self-hosted or enable in Supabase Dashboard).
    ///
    ///
    /// - Remark: HTTP `POST /oauth/authorizations/{authorization_id}/consent`.
    /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/consent/post`.
    public enum PostOauthAuthorizationsAuthorizationIdConsent {
        public static let id: Swift.String = "post/oauth/authorizations/{authorization_id}/consent"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/path/authorization_id`.
                public var authorizationId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - authorizationId:
                public init(authorizationId: Swift.String) {
                    self.authorizationId = authorizationId
                }
            }
            public var path: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Path
            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOauthAuthorizationsAuthorizationIdConsent.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostOauthAuthorizationsAuthorizationIdConsent.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Headers
            /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/requestBody/json`.
                public struct JsonPayload: Codable, Hashable, Sendable {
                    /// Whether to approve or deny the authorization
                    ///
                    /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/requestBody/json/action`.
                    @frozen public enum ActionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case approve = "approve"
                        case deny = "deny"
                    }
                    /// Whether to approve or deny the authorization
                    ///
                    /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/requestBody/json/action`.
                    public var action: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Body.JsonPayload.ActionPayload
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - action: Whether to approve or deny the authorization
                    public init(action: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Body.JsonPayload.ActionPayload) {
                        self.action = action
                    }
                    public enum CodingKeys: String, CodingKey {
                        case action
                    }
                }
                /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/requestBody/content/application\/json`.
                case json(Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Body.JsonPayload)
            }
            public var body: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Path,
                headers: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Headers = .init(),
                body: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/responses/200/content/json/redirect_url`.
                        public var redirectUrl: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - redirectUrl:
                        public init(redirectUrl: Swift.String? = nil) {
                            self.redirectUrl = redirectUrl
                        }
                        public enum CodingKeys: String, CodingKey {
                            case redirectUrl = "redirect_url"
                        }
                    }
                    /// - Remark: Generated from `#/paths/oauth/authorizations/{authorization_id}/consent/POST/responses/200/content/application\/json`.
                    case json(Operations.PostOauthAuthorizationsAuthorizationIdConsent.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Authorization consent processed
            ///
            /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/consent/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PostOauthAuthorizationsAuthorizationIdConsent.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.PostOauthAuthorizationsAuthorizationIdConsent.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Bad Request response. Can occur if the passed in JSON cannot be unmarshalled properly or when CAPTCHA verification was not successful. In certain cases can also occur when features are disabled on the server (e.g. sign ups). It may also mean that the operation failed due to some constraint not being met (such a user already exists for example).
            ///
            ///
            /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/consent/post/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// HTTP Unauthorized response.
            ///
            ///
            /// - Remark: Generated from `#/paths//oauth/authorizations/{authorization_id}/consent/post/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.UnauthorizedResponse)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Components.Responses.UnauthorizedResponse {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Service healthcheck.
    ///
    /// Ping this endpoint to receive information about the health of the service.
    ///
    /// - Remark: HTTP `GET /health`.
    /// - Remark: Generated from `#/paths//health/get`.
    public enum GetHealth {
        public static let id: Swift.String = "get/health"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/health/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetHealth.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetHealth.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetHealth.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.GetHealth.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/health/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/health/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/health/GET/responses/200/content/json/version`.
                        public var version: Swift.String?
                        /// - Remark: Generated from `#/paths/health/GET/responses/200/content/json/name`.
                        public var name: Swift.String?
                        /// - Remark: Generated from `#/paths/health/GET/responses/200/content/json/description`.
                        public var description: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - version:
                        ///   - name:
                        ///   - description:
                        public init(
                            version: Swift.String? = nil,
                            name: Swift.String? = nil,
                            description: Swift.String? = nil
                        ) {
                            self.version = version
                            self.name = name
                            self.description = description
                        }
                        public enum CodingKeys: String, CodingKey {
                            case version
                            case name
                            case description
                        }
                    }
                    /// - Remark: Generated from `#/paths/health/GET/responses/200/content/application\/json`.
                    case json(Operations.GetHealth.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetHealth.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetHealth.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetHealth.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Service is healthy.
            ///
            ///
            /// - Remark: Generated from `#/paths//health/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetHealth.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetHealth.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// Creates a new `InternalServerError`.
                public init() {}
            }
            /// Service is not healthy. Retriable with exponential backoff.
            ///
            ///
            /// - Remark: Generated from `#/paths//health/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetHealth.Output.InternalServerError)
            /// Service is not healthy. Retriable with exponential backoff.
            ///
            ///
            /// - Remark: Generated from `#/paths//health/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            public static var internalServerError: Self {
                .internalServerError(.init())
            }
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.GetHealth.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            public struct BadGateway: Sendable, Hashable {
                /// Creates a new `BadGateway`.
                public init() {}
            }
            /// Service is not healthy: infrastructure issue. Usually not retriable.
            ///
            ///
            /// - Remark: Generated from `#/paths//health/get/responses/502`.
            ///
            /// HTTP response code: `502 badGateway`.
            case badGateway(Operations.GetHealth.Output.BadGateway)
            /// Service is not healthy: infrastructure issue. Usually not retriable.
            ///
            ///
            /// - Remark: Generated from `#/paths//health/get/responses/502`.
            ///
            /// HTTP response code: `502 badGateway`.
            public static var badGateway: Self {
                .badGateway(.init())
            }
            /// The associated value of the enum case if `self` is `.badGateway`.
            ///
            /// - Throws: An error if `self` is not `.badGateway`.
            /// - SeeAlso: `.badGateway`.
            public var badGateway: Operations.GetHealth.Output.BadGateway {
                get throws {
                    switch self {
                    case let .badGateway(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badGateway",
                            response: self
                        )
                    }
                }
            }
            public struct ServiceUnavailable: Sendable, Hashable {
                /// Creates a new `ServiceUnavailable`.
                public init() {}
            }
            /// Service is not healthy: infrastrucutre issue. Retriable with exponential backoff.
            ///
            ///
            /// - Remark: Generated from `#/paths//health/get/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.GetHealth.Output.ServiceUnavailable)
            /// Service is not healthy: infrastrucutre issue. Retriable with exponential backoff.
            ///
            ///
            /// - Remark: Generated from `#/paths//health/get/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            public static var serviceUnavailable: Self {
                .serviceUnavailable(.init())
            }
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            public var serviceUnavailable: Operations.GetHealth.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            public struct GatewayTimeout: Sendable, Hashable {
                /// Creates a new `GatewayTimeout`.
                public init() {}
            }
            /// Service is not healthy: request timed out. Retriable with exponential backoff.
            ///
            ///
            /// - Remark: Generated from `#/paths//health/get/responses/504`.
            ///
            /// HTTP response code: `504 gatewayTimeout`.
            case gatewayTimeout(Operations.GetHealth.Output.GatewayTimeout)
            /// Service is not healthy: request timed out. Retriable with exponential backoff.
            ///
            ///
            /// - Remark: Generated from `#/paths//health/get/responses/504`.
            ///
            /// HTTP response code: `504 gatewayTimeout`.
            public static var gatewayTimeout: Self {
                .gatewayTimeout(.init())
            }
            /// The associated value of the enum case if `self` is `.gatewayTimeout`.
            ///
            /// - Throws: An error if `self` is not `.gatewayTimeout`.
            /// - SeeAlso: `.gatewayTimeout`.
            public var gatewayTimeout: Operations.GetHealth.Output.GatewayTimeout {
                get throws {
                    switch self {
                    case let .gatewayTimeout(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gatewayTimeout",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve some of the public settings of the server.
    ///
    /// Use this endpoint to configure parts of any authentication UIs depending on the configured settings.
    ///
    ///
    /// - Remark: HTTP `GET /settings`.
    /// - Remark: Generated from `#/paths//settings/get`.
    public enum GetSettings {
        public static let id: Swift.String = "get/settings"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/settings/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetSettings.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetSettings.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetSettings.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.GetSettings.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/settings/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/settings/GET/responses/200/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// Whether new accounts can be created. (Valid for all providers.)
                        ///
                        /// - Remark: Generated from `#/paths/settings/GET/responses/200/content/json/disable_signup`.
                        public var disableSignup: Swift.Bool?
                        /// Whether new email addresses need to be confirmed before sign-in is possible.
                        ///
                        /// - Remark: Generated from `#/paths/settings/GET/responses/200/content/json/mailer_autoconfirm`.
                        public var mailerAutoconfirm: Swift.Bool?
                        /// Whether new phone numbers need to be confirmed before sign-in is possible.
                        ///
                        /// - Remark: Generated from `#/paths/settings/GET/responses/200/content/json/phone_autoconfirm`.
                        public var phoneAutoconfirm: Swift.Bool?
                        /// Which SMS provider is being used to send messages to phone numbers.
                        ///
                        /// - Remark: Generated from `#/paths/settings/GET/responses/200/content/json/sms_provider`.
                        public var smsProvider: Swift.String?
                        /// Whether SAML is enabled on this API server. Defaults to false.
                        ///
                        /// - Remark: Generated from `#/paths/settings/GET/responses/200/content/json/saml_enabled`.
                        public var samlEnabled: Swift.Bool?
                        /// Which external identity providers are enabled.
                        ///
                        /// - Remark: Generated from `#/paths/settings/GET/responses/200/content/json/external`.
                        public var external: OpenAPIRuntime.OpenAPIObjectContainer?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - disableSignup: Whether new accounts can be created. (Valid for all providers.)
                        ///   - mailerAutoconfirm: Whether new email addresses need to be confirmed before sign-in is possible.
                        ///   - phoneAutoconfirm: Whether new phone numbers need to be confirmed before sign-in is possible.
                        ///   - smsProvider: Which SMS provider is being used to send messages to phone numbers.
                        ///   - samlEnabled: Whether SAML is enabled on this API server. Defaults to false.
                        ///   - external: Which external identity providers are enabled.
                        public init(
                            disableSignup: Swift.Bool? = nil,
                            mailerAutoconfirm: Swift.Bool? = nil,
                            phoneAutoconfirm: Swift.Bool? = nil,
                            smsProvider: Swift.String? = nil,
                            samlEnabled: Swift.Bool? = nil,
                            external: OpenAPIRuntime.OpenAPIObjectContainer? = nil
                        ) {
                            self.disableSignup = disableSignup
                            self.mailerAutoconfirm = mailerAutoconfirm
                            self.phoneAutoconfirm = phoneAutoconfirm
                            self.smsProvider = smsProvider
                            self.samlEnabled = samlEnabled
                            self.external = external
                        }
                        public enum CodingKeys: String, CodingKey {
                            case disableSignup = "disable_signup"
                            case mailerAutoconfirm = "mailer_autoconfirm"
                            case phoneAutoconfirm = "phone_autoconfirm"
                            case smsProvider = "sms_provider"
                            case samlEnabled = "saml_enabled"
                            case external
                        }
                    }
                    /// - Remark: Generated from `#/paths/settings/GET/responses/200/content/application\/json`.
                    case json(Operations.GetSettings.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetSettings.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetSettings.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetSettings.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Currently applicable settings of the server.
            ///
            ///
            /// - Remark: Generated from `#/paths//settings/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetSettings.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetSettings.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
